
c:/Users/Nerdom/Desktop/mqtt/target/mqtt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002978  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00016a24  2**0
                  CONTENTS
  3 .data         00000068  2003e308  000d6990  0000e308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000480  2003e370  2003e370  0001e370  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d69f8  000d69f8  000169f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d6a20  000d6a20  00016a20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000d2613  00000000  00000000  00016a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00010c59  00000000  00000000  000e9037  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001dc3f  00000000  00000000  000f9c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000026d0  00000000  00000000  001178cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00004538  00000000  00000000  00119f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003542c  00000000  00000000  0011e4d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00027d55  00000000  00000000  00153903  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001068f6  00000000  00000000  0017b658  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000cec4  00000000  00000000  00281f50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	60 65 0d 00                                         `e..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fa41 	bl	d64b4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fa46 	bl	d64ca <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e308 	.word	0x2003e308
   d4048:	000d6990 	.word	0x000d6990
   d404c:	2003e370 	.word	0x2003e370
   d4050:	2003e370 	.word	0x2003e370
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f9e1 	bl	d5420 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6984 	.word	0x000d6984
   d4080:	000d6944 	.word	0x000d6944

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b84c 	b.w	d4120 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f883 	bl	d4194 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b993 	b.w	d53bc <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bf21 	b.w	d4edc <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 bf1f 	b.w	d4edc <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bf25 	b.w	d4eec <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bf23 	b.w	d4eec <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z8callbackPcPhj>:

void callback(char* topic, byte* payload, unsigned int length);
MQTT client("lab.thewcl.com", 1883, callback);

// recieve message
void callback(char* topic, byte* payload, unsigned int length) {
   d40b8:	b598      	push	{r3, r4, r7, lr}
    char p[length + 1];
   d40ba:	f102 0308 	add.w	r3, r2, #8
   d40be:	f023 0307 	bic.w	r3, r3, #7

void callback(char* topic, byte* payload, unsigned int length);
MQTT client("lab.thewcl.com", 1883, callback);

// recieve message
void callback(char* topic, byte* payload, unsigned int length) {
   d40c2:	af00      	add	r7, sp, #0
    char p[length + 1];
   d40c4:	ebad 0d03 	sub.w	sp, sp, r3

void callback(char* topic, byte* payload, unsigned int length);
MQTT client("lab.thewcl.com", 1883, callback);

// recieve message
void callback(char* topic, byte* payload, unsigned int length) {
   d40c8:	4614      	mov	r4, r2
    char p[length + 1];
    memcpy(p, payload, length);
   d40ca:	4668      	mov	r0, sp
   d40cc:	f002 f9f2 	bl	d64b4 <memcpy>
    p[length] = NULL;
   d40d0:	2300      	movs	r3, #0

    if (!strcmp(p, "RED"))
   d40d2:	4910      	ldr	r1, [pc, #64]	; (d4114 <_Z8callbackPcPhj+0x5c>)

// recieve message
void callback(char* topic, byte* payload, unsigned int length) {
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
   d40d4:	f80d 3004 	strb.w	r3, [sp, r4]

    if (!strcmp(p, "RED"))
   d40d8:	4668      	mov	r0, sp
   d40da:	f002 fa27 	bl	d652c <strcmp>
   d40de:	4602      	mov	r2, r0
   d40e0:	b910      	cbnz	r0, d40e8 <_Z8callbackPcPhj+0x30>
        RGB.color(255, 0, 0);
   d40e2:	4601      	mov	r1, r0
   d40e4:	20ff      	movs	r0, #255	; 0xff
   d40e6:	e010      	b.n	d410a <_Z8callbackPcPhj+0x52>
    else if (!strcmp(p, "GREEN"))
   d40e8:	490b      	ldr	r1, [pc, #44]	; (d4118 <_Z8callbackPcPhj+0x60>)
   d40ea:	4668      	mov	r0, sp
   d40ec:	f002 fa1e 	bl	d652c <strcmp>
   d40f0:	4602      	mov	r2, r0
   d40f2:	b908      	cbnz	r0, d40f8 <_Z8callbackPcPhj+0x40>
        RGB.color(0, 255, 0);
   d40f4:	21ff      	movs	r1, #255	; 0xff
   d40f6:	e008      	b.n	d410a <_Z8callbackPcPhj+0x52>
    else if (!strcmp(p, "BLUE"))
   d40f8:	4908      	ldr	r1, [pc, #32]	; (d411c <_Z8callbackPcPhj+0x64>)
   d40fa:	4668      	mov	r0, sp
   d40fc:	f002 fa16 	bl	d652c <strcmp>
        RGB.color(0, 0, 255);
   d4100:	22ff      	movs	r2, #255	; 0xff

    if (!strcmp(p, "RED"))
        RGB.color(255, 0, 0);
    else if (!strcmp(p, "GREEN"))
        RGB.color(0, 255, 0);
    else if (!strcmp(p, "BLUE"))
   d4102:	4601      	mov	r1, r0
   d4104:	b108      	cbz	r0, d410a <_Z8callbackPcPhj+0x52>
        RGB.color(0, 0, 255);
    else
        RGB.color(255, 255, 255);
   d4106:	4611      	mov	r1, r2
   d4108:	4610      	mov	r0, r2
   d410a:	f001 f918 	bl	d533e <_ZN8RGBClass5colorEiii>
}
   d410e:	46bd      	mov	sp, r7
   d4110:	bd98      	pop	{r3, r4, r7, pc}
   d4112:	bf00      	nop
   d4114:	000d6574 	.word	0x000d6574
   d4118:	000d6578 	.word	0x000d6578
   d411c:	000d657e 	.word	0x000d657e

000d4120 <setup>:


void setup() {
   d4120:	b500      	push	{lr}
    RGB.control(true);
   d4122:	2001      	movs	r0, #1
    else
        RGB.color(255, 255, 255);
}


void setup() {
   d4124:	b089      	sub	sp, #36	; 0x24
    RGB.control(true);
   d4126:	f001 f8fa 	bl	d531e <_ZN8RGBClass7controlEb>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d412a:	4916      	ldr	r1, [pc, #88]	; (d4184 <setup+0x64>)
   d412c:	a804      	add	r0, sp, #16
   d412e:	f000 ffe5 	bl	d50fc <_ZN6StringC1EPK19__FlashStringHelper>

    // connect to the server(unique id by Time.now())
    client.connect("sparkclient_" + String(Time.now()));
   d4132:	f001 f8d3 	bl	d52dc <_ZN9TimeClass3nowEv>
   d4136:	220a      	movs	r2, #10
   d4138:	4601      	mov	r1, r0
   d413a:	4668      	mov	r0, sp
   d413c:	f001 f802 	bl	d5144 <_ZN6StringC1Elh>
   d4140:	4669      	mov	r1, sp
   d4142:	a804      	add	r0, sp, #16
   d4144:	f001 f828 	bl	d5198 <_ZplRK15StringSumHelperRK6String>
   d4148:	6801      	ldr	r1, [r0, #0]
   d414a:	480f      	ldr	r0, [pc, #60]	; (d4188 <setup+0x68>)
   d414c:	f000 fa6c 	bl	d4628 <_ZN4MQTT7connectEPKc>
   d4150:	4668      	mov	r0, sp
   d4152:	f000 ff8c 	bl	d506e <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4156:	a804      	add	r0, sp, #16
   d4158:	f000 ff89 	bl	d506e <_ZN6StringD1Ev>
    pinMode(D7, INPUT);
   d415c:	2007      	movs	r0, #7
   d415e:	2100      	movs	r1, #0
   d4160:	f001 ffd0 	bl	d6104 <pinMode>
    // publish/subscribe
    if (client.isConnected()) {
   d4164:	4808      	ldr	r0, [pc, #32]	; (d4188 <setup+0x68>)
   d4166:	f000 f97b 	bl	d4460 <_ZN4MQTT11isConnectedEv>
   d416a:	b140      	cbz	r0, d417e <setup+0x5e>
        client.publish("toddArgon/message","hello");
   d416c:	4907      	ldr	r1, [pc, #28]	; (d418c <setup+0x6c>)
   d416e:	4a08      	ldr	r2, [pc, #32]	; (d4190 <setup+0x70>)
   d4170:	4805      	ldr	r0, [pc, #20]	; (d4188 <setup+0x68>)
   d4172:	f000 fad9 	bl	d4728 <_ZN4MQTT7publishEPKcS1_>
        client.subscribe("toddArgon/message");
   d4176:	4905      	ldr	r1, [pc, #20]	; (d418c <setup+0x6c>)
   d4178:	4803      	ldr	r0, [pc, #12]	; (d4188 <setup+0x68>)
   d417a:	f000 fc48 	bl	d4a0e <_ZN4MQTT9subscribeEPKc>
    }
}
   d417e:	b009      	add	sp, #36	; 0x24
   d4180:	f85d fb04 	ldr.w	pc, [sp], #4
   d4184:	000d6583 	.word	0x000d6583
   d4188:	2003e374 	.word	0x2003e374
   d418c:	000d6596 	.word	0x000d6596
   d4190:	000d6590 	.word	0x000d6590

000d4194 <loop>:

void loop() {
   d4194:	b508      	push	{r3, lr}
    if (client.isConnected())
   d4196:	480a      	ldr	r0, [pc, #40]	; (d41c0 <loop+0x2c>)
   d4198:	f000 f962 	bl	d4460 <_ZN4MQTT11isConnectedEv>
   d419c:	b110      	cbz	r0, d41a4 <loop+0x10>
        client.loop();
   d419e:	4808      	ldr	r0, [pc, #32]	; (d41c0 <loop+0x2c>)
   d41a0:	f000 fb09 	bl	d47b6 <_ZN4MQTT4loopEv>
    if(digitalRead(D7) == HIGH){
   d41a4:	2007      	movs	r0, #7
   d41a6:	f001 ffbe 	bl	d6126 <digitalRead>
   d41aa:	2801      	cmp	r0, #1
   d41ac:	d106      	bne.n	d41bc <loop+0x28>
      client.publish("toddArgon/message", "downloadmoreram.com");
   d41ae:	4a05      	ldr	r2, [pc, #20]	; (d41c4 <loop+0x30>)
   d41b0:	4905      	ldr	r1, [pc, #20]	; (d41c8 <loop+0x34>)
   d41b2:	4803      	ldr	r0, [pc, #12]	; (d41c0 <loop+0x2c>)
    }
    else{

    }
   d41b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void loop() {
    if (client.isConnected())
        client.loop();
    if(digitalRead(D7) == HIGH){
      client.publish("toddArgon/message", "downloadmoreram.com");
   d41b8:	f000 bab6 	b.w	d4728 <_ZN4MQTT7publishEPKcS1_>
   d41bc:	bd08      	pop	{r3, pc}
   d41be:	bf00      	nop
   d41c0:	2003e374 	.word	0x2003e374
   d41c4:	000d65a8 	.word	0x000d65a8
   d41c8:	000d6596 	.word	0x000d6596

000d41cc <_GLOBAL__sub_I_client>:
    }
    else{

    }
   d41cc:	b510      	push	{r4, lr}
#include "MQTT.h"

void callback(char* topic, byte* payload, unsigned int length);
MQTT client("lab.thewcl.com", 1883, callback);
   d41ce:	4c08      	ldr	r4, [pc, #32]	; (d41f0 <_GLOBAL__sub_I_client+0x24>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d41d0:	f000 fc48 	bl	d4a64 <HAL_Pin_Map>
   d41d4:	f240 725b 	movw	r2, #1883	; 0x75b
   d41d8:	4906      	ldr	r1, [pc, #24]	; (d41f4 <_GLOBAL__sub_I_client+0x28>)
   d41da:	4b07      	ldr	r3, [pc, #28]	; (d41f8 <_GLOBAL__sub_I_client+0x2c>)
   d41dc:	4620      	mov	r0, r4
   d41de:	f000 f857 	bl	d4290 <_ZN4MQTTC1EPctPFvS0_PhjE>
   d41e2:	4620      	mov	r0, r4
   d41e4:	4a05      	ldr	r2, [pc, #20]	; (d41fc <_GLOBAL__sub_I_client+0x30>)
   d41e6:	4906      	ldr	r1, [pc, #24]	; (d4200 <_GLOBAL__sub_I_client+0x34>)
      client.publish("toddArgon/message", "downloadmoreram.com");
    }
    else{

    }
   d41e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "MQTT.h"

void callback(char* topic, byte* payload, unsigned int length);
MQTT client("lab.thewcl.com", 1883, callback);
   d41ec:	f001 bff0 	b.w	d61d0 <__aeabi_atexit>
   d41f0:	2003e374 	.word	0x2003e374
   d41f4:	000d65bc 	.word	0x000d65bc
   d41f8:	000d40b9 	.word	0x000d40b9
   d41fc:	2003e370 	.word	0x2003e370
   d4200:	000d4a15 	.word	0x000d4a15

000d4204 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4204:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4206:	6984      	ldr	r4, [r0, #24]
   d4208:	4b0a      	ldr	r3, [pc, #40]	; (d4234 <_ZN9TCPClientD1Ev+0x30>)
   d420a:	6003      	str	r3, [r0, #0]
   d420c:	4605      	mov	r5, r0
   d420e:	b17c      	cbz	r4, d4230 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4210:	6863      	ldr	r3, [r4, #4]
   d4212:	3b01      	subs	r3, #1
   d4214:	6063      	str	r3, [r4, #4]
   d4216:	b95b      	cbnz	r3, d4230 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d4218:	6823      	ldr	r3, [r4, #0]
   d421a:	4620      	mov	r0, r4
   d421c:	689b      	ldr	r3, [r3, #8]
   d421e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4220:	68a3      	ldr	r3, [r4, #8]
   d4222:	3b01      	subs	r3, #1
   d4224:	60a3      	str	r3, [r4, #8]
   d4226:	b91b      	cbnz	r3, d4230 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d4228:	6823      	ldr	r3, [r4, #0]
   d422a:	4620      	mov	r0, r4
   d422c:	68db      	ldr	r3, [r3, #12]
   d422e:	4798      	blx	r3
   d4230:	4628      	mov	r0, r5
   d4232:	bd38      	pop	{r3, r4, r5, pc}
   d4234:	000d681c 	.word	0x000d681c

000d4238 <_ZN9TCPClientD0Ev>:
   d4238:	b510      	push	{r4, lr}
   d423a:	4604      	mov	r4, r0
   d423c:	f7ff ffe2 	bl	d4204 <_ZN9TCPClientD1Ev>
   d4240:	4620      	mov	r0, r4
   d4242:	211c      	movs	r1, #28
   d4244:	f001 ffc9 	bl	d61da <_ZdlPvj>
   d4248:	4620      	mov	r0, r4
   d424a:	bd10      	pop	{r4, pc}

000d424c <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d424c:	b538      	push	{r3, r4, r5, lr}
   d424e:	461d      	mov	r5, r3
    this->callback = callback;
   d4250:	9b05      	ldr	r3, [sp, #20]
   d4252:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
   d4254:	2300      	movs	r3, #0

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d4256:	4604      	mov	r4, r0
    this->callback = callback;
    this->qoscallback = NULL;
   d4258:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
   d425a:	b102      	cbz	r2, d425e <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
   d425c:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
   d425e:	b119      	cbz	r1, d4268 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
   d4260:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4264:	f000 ff5d 	bl	d5122 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d4268:	9b04      	ldr	r3, [sp, #16]
   d426a:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d426c:	9b06      	ldr	r3, [sp, #24]
    if (buffer != NULL)
   d426e:	69e0      	ldr	r0, [r4, #28]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
   d4270:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d4274:	2bff      	cmp	r3, #255	; 0xff
   d4276:	bfb8      	it	lt
   d4278:	23ff      	movlt	r3, #255	; 0xff
   d427a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d427e:	b108      	cbz	r0, d4284 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
   d4280:	f7ff ff0f 	bl	d40a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d4284:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d4288:	f7ff ff07 	bl	d409a <_Znaj>
   d428c:	61e0      	str	r0, [r4, #28]
   d428e:	bd38      	pop	{r3, r4, r5, pc}

000d4290 <_ZN4MQTTC1EPctPFvS0_PhjE>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d4290:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4294:	4604      	mov	r4, r0
   d4296:	2500      	movs	r5, #0
   d4298:	4617      	mov	r7, r2
   d429a:	4698      	mov	r8, r3
   d429c:	460e      	mov	r6, r1
   d429e:	f001 fe0d 	bl	d5ebc <_ZN9TCPClientC1Ev>
   d42a2:	61e5      	str	r5, [r4, #28]
   d42a4:	490a      	ldr	r1, [pc, #40]	; (d42d0 <_ZN4MQTTC1EPctPFvS0_PhjE+0x40>)
   d42a6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d42aa:	f000 ff27 	bl	d50fc <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d42ae:	23ff      	movs	r3, #255	; 0xff
   d42b0:	9302      	str	r3, [sp, #8]
   d42b2:	230f      	movs	r3, #15
   d42b4:	9300      	str	r3, [sp, #0]
   d42b6:	4620      	mov	r0, r4
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d42b8:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d42ba:	f8cd 8004 	str.w	r8, [sp, #4]
   d42be:	463b      	mov	r3, r7
   d42c0:	462a      	mov	r2, r5
   d42c2:	4631      	mov	r1, r6
   d42c4:	f7ff ffc2 	bl	d424c <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
   d42c8:	4620      	mov	r0, r4
   d42ca:	b004      	add	sp, #16
   d42cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d42d0:	000d6636 	.word	0x000d6636

000d42d4 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d42d4:	b510      	push	{r4, lr}
   d42d6:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d42d8:	4620      	mov	r0, r4
   d42da:	f001 fd53 	bl	d5d84 <_ZN9TCPClient9availableEv>
   d42de:	2800      	cmp	r0, #0
   d42e0:	d0fa      	beq.n	d42d8 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d42e2:	4620      	mov	r0, r4
   d42e4:	f001 fc6f 	bl	d5bc6 <_ZN9TCPClient4readEv>
}
   d42e8:	b2c0      	uxtb	r0, r0
   d42ea:	bd10      	pop	{r4, pc}

000d42ec <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d42ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d42f0:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d42f2:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d42f4:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   d42f6:	f7ff ffed 	bl	d42d4 <_ZN4MQTT8readByteEv>
   d42fa:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d42fc:	69eb      	ldr	r3, [r5, #28]
   d42fe:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d4302:	f04f 0901 	mov.w	r9, #1
   d4306:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d430a:	2700      	movs	r7, #0
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
   d430c:	464e      	mov	r6, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d430e:	4628      	mov	r0, r5
   d4310:	f7ff ffe0 	bl	d42d4 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d4314:	69eb      	ldr	r3, [r5, #28]
   d4316:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d4318:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d431c:	fb13 f309 	smulbb	r3, r3, r9
   d4320:	441f      	add	r7, r3
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d4322:	1c74      	adds	r4, r6, #1
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d4324:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d4326:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d4328:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   d432a:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d432e:	d501      	bpl.n	d4334 <_ZN4MQTT10readPacketEPh+0x48>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d4330:	4626      	mov	r6, r4
   d4332:	e7ec      	b.n	d430e <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d4334:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d4336:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d433a:	f888 3000 	strb.w	r3, [r8]

    if (isPublish) {
   d433e:	d113      	bne.n	d4368 <_ZN4MQTT10readPacketEPh+0x7c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d4340:	4628      	mov	r0, r5
   d4342:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d4346:	f7ff ffc5 	bl	d42d4 <_ZN4MQTT8readByteEv>
   d434a:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
   d434e:	4628      	mov	r0, r5
   d4350:	1cf4      	adds	r4, r6, #3
   d4352:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d4356:	3602      	adds	r6, #2
   d4358:	f7ff ffbc 	bl	d42d4 <_ZN4MQTT8readByteEv>
   d435c:	b2b6      	uxth	r6, r6
   d435e:	b2a4      	uxth	r4, r4
   d4360:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d4364:	2302      	movs	r3, #2
   d4366:	e000      	b.n	d436a <_ZN4MQTT10readPacketEPh+0x7e>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   d4368:	2300      	movs	r3, #0
   d436a:	1b1b      	subs	r3, r3, r4
   d436c:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d436e:	19a3      	adds	r3, r4, r6
   d4370:	b29b      	uxth	r3, r3
   d4372:	429f      	cmp	r7, r3
   d4374:	d90b      	bls.n	d438e <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d4376:	4628      	mov	r0, r5
   d4378:	f7ff ffac 	bl	d42d4 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d437c:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d4380:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   d4382:	bf84      	itt	hi
   d4384:	69eb      	ldrhi	r3, [r5, #28]
   d4386:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   d4388:	3401      	adds	r4, #1
   d438a:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d438c:	e7ef      	b.n	d436e <_ZN4MQTT10readPacketEPh+0x82>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
   d438e:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d4392:	42a0      	cmp	r0, r4
   d4394:	bf2c      	ite	cs
   d4396:	4620      	movcs	r0, r4
   d4398:	2000      	movcc	r0, #0
   d439a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d439e <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d439e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d43a0:	4607      	mov	r7, r0
   d43a2:	468e      	mov	lr, r1
   d43a4:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d43a6:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   d43a8:	2400      	movs	r4, #0
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d43aa:	a902      	add	r1, sp, #8
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   d43ac:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d43b0:	4421      	add	r1, r4
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
   d43b2:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
   d43b4:	bf18      	it	ne
   d43b6:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
   d43ba:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d43bc:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
   d43c0:	b2e4      	uxtb	r4, r4
    } while(len > 0);
   d43c2:	2d00      	cmp	r5, #0
   d43c4:	d1f1      	bne.n	d43aa <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
   d43c6:	f1c4 0304 	rsb	r3, r4, #4
   d43ca:	18d1      	adds	r1, r2, r3
   d43cc:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d43d0:	42a5      	cmp	r5, r4
   d43d2:	da06      	bge.n	d43e2 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
   d43d4:	1b2b      	subs	r3, r5, r4
   d43d6:	a801      	add	r0, sp, #4
   d43d8:	4413      	add	r3, r2
   d43da:	5c28      	ldrb	r0, [r5, r0]
   d43dc:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
   d43de:	3501      	adds	r5, #1
   d43e0:	e7f6      	b.n	d43d0 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d43e2:	1c72      	adds	r2, r6, #1
   d43e4:	4422      	add	r2, r4
   d43e6:	4638      	mov	r0, r7
   d43e8:	f001 facb 	bl	d5982 <_ZN9TCPClient5writeEPKhj>
   d43ec:	4605      	mov	r5, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d43ee:	f000 fb79 	bl	d4ae4 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d43f2:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
   d43f4:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d43f6:	4434      	add	r4, r6
   d43f8:	b2a8      	uxth	r0, r5
}
   d43fa:	1a23      	subs	r3, r4, r0
   d43fc:	4258      	negs	r0, r3
   d43fe:	4158      	adcs	r0, r3
   d4400:	b003      	add	sp, #12
   d4402:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4404 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d4404:	b510      	push	{r4, lr}
    buffer[0] = MQTTDISCONNECT;
   d4406:	69c3      	ldr	r3, [r0, #28]
   d4408:	22e0      	movs	r2, #224	; 0xe0
   d440a:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d440c:	69c3      	ldr	r3, [r0, #28]
   d440e:	2200      	movs	r2, #0
   d4410:	705a      	strb	r2, [r3, #1]
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d4412:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
    buffer[1] = 0;
    _client.write(buffer,2);
   d4414:	2202      	movs	r2, #2
   d4416:	69c1      	ldr	r1, [r0, #28]
   d4418:	f001 fab3 	bl	d5982 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d441c:	4620      	mov	r0, r4
   d441e:	f001 fc9a 	bl	d5d56 <_ZN9TCPClient4stopEv>
   d4422:	f000 fb5f 	bl	d4ae4 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d4426:	6260      	str	r0, [r4, #36]	; 0x24
   d4428:	62a0      	str	r0, [r4, #40]	; 0x28
   d442a:	bd10      	pop	{r4, pc}

000d442c <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d442c:	3302      	adds	r3, #2
    _client.write(buffer,2);
    _client.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d442e:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d4430:	b29b      	uxth	r3, r3
   d4432:	460d      	mov	r5, r1
   d4434:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
   d4436:	f815 6b01 	ldrb.w	r6, [r5], #1
   d443a:	b2a4      	uxth	r4, r4
   d443c:	b13e      	cbz	r6, d444e <_ZN4MQTT11writeStringEPKcPht+0x22>
   d443e:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
   d4442:	429f      	cmp	r7, r3
   d4444:	d903      	bls.n	d444e <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
   d4446:	1c5c      	adds	r4, r3, #1
   d4448:	54d6      	strb	r6, [r2, r3]
   d444a:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
   d444c:	e7f2      	b.n	d4434 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d444e:	1b19      	subs	r1, r3, r4
   d4450:	440a      	add	r2, r1
   d4452:	1221      	asrs	r1, r4, #8
   d4454:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d4458:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
   d445c:	4618      	mov	r0, r3
   d445e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4460 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d4460:	b538      	push	{r3, r4, r5, lr}
   d4462:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
   d4464:	f001 faa3 	bl	d59ae <_ZN9TCPClient9connectedEv>
   d4468:	2800      	cmp	r0, #0
   d446a:	bf14      	ite	ne
   d446c:	2401      	movne	r4, #1
   d446e:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
   d4470:	d102      	bne.n	d4478 <_ZN4MQTT11isConnectedEv+0x18>
   d4472:	4628      	mov	r0, r5
   d4474:	f001 fc6f 	bl	d5d56 <_ZN9TCPClient4stopEv>
    return rc;
}
   d4478:	4620      	mov	r0, r4
   d447a:	bd38      	pop	{r3, r4, r5, pc}

000d447c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d447c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4480:	b087      	sub	sp, #28
   d4482:	4604      	mov	r4, r0
   d4484:	4689      	mov	r9, r1
   d4486:	4617      	mov	r7, r2
   d4488:	461e      	mov	r6, r3
   d448a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
   d448e:	f7ff ffe7 	bl	d4460 <_ZN4MQTT11isConnectedEv>
   d4492:	4605      	mov	r5, r0
   d4494:	2800      	cmp	r0, #0
   d4496:	f040 80bd 	bne.w	d4614 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
   d449a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d449c:	b939      	cbnz	r1, d44ae <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
   d449e:	4603      	mov	r3, r0
   d44a0:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d44a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d44a6:	4620      	mov	r0, r4
   d44a8:	f001 faae 	bl	d5a08 <_ZN9TCPClient7connectEPKctm>
   d44ac:	e009      	b.n	d44c2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
   d44ae:	4668      	mov	r0, sp
   d44b0:	f001 f858 	bl	d5564 <_ZN9IPAddressC1EPKh>
   d44b4:	462b      	mov	r3, r5
   d44b6:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d44ba:	4669      	mov	r1, sp
   d44bc:	4620      	mov	r0, r4
   d44be:	f001 fbcd 	bl	d5c5c <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
   d44c2:	2800      	cmp	r0, #0
   d44c4:	f000 80a2 	beq.w	d460c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
   d44c8:	2301      	movs	r3, #1
   d44ca:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
   d44cc:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   d44d0:	2b04      	cmp	r3, #4
   d44d2:	d115      	bne.n	d4500 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d44d4:	4b52      	ldr	r3, [pc, #328]	; (d4620 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
   d44d6:	6818      	ldr	r0, [r3, #0]
   d44d8:	889a      	ldrh	r2, [r3, #4]
   d44da:	f8ad 2004 	strh.w	r2, [sp, #4]
   d44de:	9000      	str	r0, [sp, #0]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d44e0:	69e2      	ldr	r2, [r4, #28]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d44e2:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d44e4:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d44e6:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d44ea:	1d53      	adds	r3, r2, #5
   d44ec:	f8c2 0005 	str.w	r0, [r2, #5]
   d44f0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   d44f4:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d44f8:	719a      	strb	r2, [r3, #6]
   d44fa:	8099      	strh	r1, [r3, #4]
                length+=sizeof(MQTT_HEADER_V311);
   d44fc:	230c      	movs	r3, #12
   d44fe:	e012      	b.n	d4526 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d4500:	4b48      	ldr	r3, [pc, #288]	; (d4624 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d4502:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d4506:	6818      	ldr	r0, [r3, #0]
   d4508:	6859      	ldr	r1, [r3, #4]
   d450a:	7a1b      	ldrb	r3, [r3, #8]
   d450c:	466a      	mov	r2, sp
   d450e:	c203      	stmia	r2!, {r0, r1}
   d4510:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d4512:	466b      	mov	r3, sp
   d4514:	cb03      	ldmia	r3!, {r0, r1}
   d4516:	f8cc 0005 	str.w	r0, [ip, #5]
   d451a:	f8cc 1009 	str.w	r1, [ip, #9]
   d451e:	7813      	ldrb	r3, [r2, #0]
   d4520:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d4524:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
   d4526:	f1b8 0f00 	cmp.w	r8, #0
   d452a:	d00a      	beq.n	d4542 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d452c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   d4530:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   d4534:	0152      	lsls	r2, r2, #5
   d4536:	f042 0206 	orr.w	r2, r2, #6
   d453a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
   d453e:	b2d2      	uxtb	r2, r2
   d4540:	e000      	b.n	d4544 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
   d4542:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
   d4544:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
   d4548:	b909      	cbnz	r1, d454e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
   d454a:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
   d454e:	b12f      	cbz	r7, d455c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
   d4550:	b916      	cbnz	r6, d4558 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
   d4552:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d4556:	e001      	b.n	d455c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
   d4558:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
   d455c:	69e1      	ldr	r1, [r4, #28]
   d455e:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
   d4560:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d4562:	69e1      	ldr	r1, [r4, #28]
   d4564:	1c58      	adds	r0, r3, #1
   d4566:	1212      	asrs	r2, r2, #8
   d4568:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d456a:	1c9a      	adds	r2, r3, #2
   d456c:	69e1      	ldr	r1, [r4, #28]
   d456e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d4570:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d4572:	3303      	adds	r3, #3
   d4574:	69e2      	ldr	r2, [r4, #28]
   d4576:	4649      	mov	r1, r9
   d4578:	4620      	mov	r0, r4
   d457a:	f7ff ff57 	bl	d442c <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
   d457e:	f1b8 0f00 	cmp.w	r8, #0
   d4582:	d00b      	beq.n	d459c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
   d4584:	4603      	mov	r3, r0
   d4586:	69e2      	ldr	r2, [r4, #28]
   d4588:	4641      	mov	r1, r8
   d458a:	4620      	mov	r0, r4
   d458c:	f7ff ff4e 	bl	d442c <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d4590:	69e2      	ldr	r2, [r4, #28]
   d4592:	9911      	ldr	r1, [sp, #68]	; 0x44
   d4594:	4603      	mov	r3, r0
   d4596:	4620      	mov	r0, r4
   d4598:	f7ff ff48 	bl	d442c <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
   d459c:	b167      	cbz	r7, d45b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
   d459e:	4603      	mov	r3, r0
   d45a0:	69e2      	ldr	r2, [r4, #28]
   d45a2:	4639      	mov	r1, r7
   d45a4:	4620      	mov	r0, r4
   d45a6:	f7ff ff41 	bl	d442c <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
   d45aa:	b12e      	cbz	r6, d45b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
   d45ac:	4603      	mov	r3, r0
   d45ae:	69e2      	ldr	r2, [r4, #28]
   d45b0:	4631      	mov	r1, r6
   d45b2:	4620      	mov	r0, r4
   d45b4:	f7ff ff3a 	bl	d442c <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
   d45b8:	1f43      	subs	r3, r0, #5
   d45ba:	b29b      	uxth	r3, r3
   d45bc:	69e2      	ldr	r2, [r4, #28]
   d45be:	2110      	movs	r1, #16
   d45c0:	4620      	mov	r0, r4
   d45c2:	f7ff feec 	bl	d439e <_ZN4MQTT5writeEhPht>
   d45c6:	f000 fa8d 	bl	d4ae4 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d45ca:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
   d45ce:	6260      	str	r0, [r4, #36]	; 0x24
   d45d0:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
   d45d2:	4620      	mov	r0, r4
   d45d4:	f001 fbd6 	bl	d5d84 <_ZN9TCPClient9availableEv>
   d45d8:	b940      	cbnz	r0, d45ec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
   d45da:	f000 fa83 	bl	d4ae4 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d45de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d45e0:	1ac0      	subs	r0, r0, r3
   d45e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d45e4:	4373      	muls	r3, r6
   d45e6:	4298      	cmp	r0, r3
   d45e8:	d9f3      	bls.n	d45d2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
   d45ea:	e00f      	b.n	d460c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d45ec:	4669      	mov	r1, sp
   d45ee:	4620      	mov	r0, r4
   d45f0:	f7ff fe7c 	bl	d42ec <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
   d45f4:	2804      	cmp	r0, #4
   d45f6:	d109      	bne.n	d460c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
   d45f8:	69e3      	ldr	r3, [r4, #28]
   d45fa:	78de      	ldrb	r6, [r3, #3]
   d45fc:	b936      	cbnz	r6, d460c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
   d45fe:	f000 fa71 	bl	d4ae4 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
   d4602:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
   d4604:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d4606:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
   d460a:	e004      	b.n	d4616 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
   d460c:	4620      	mov	r0, r4
   d460e:	f001 fba2 	bl	d5d56 <_ZN9TCPClient4stopEv>
   d4612:	e000      	b.n	d4616 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
   d4614:	2500      	movs	r5, #0
}
   d4616:	4628      	mov	r0, r5
   d4618:	b007      	add	sp, #28
   d461a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d461e:	bf00      	nop
   d4620:	000d65cb 	.word	0x000d65cb
   d4624:	000d65d2 	.word	0x000d65d2

000d4628 <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
   d4628:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d462a:	2304      	movs	r3, #4
   d462c:	9305      	str	r3, [sp, #20]
   d462e:	2301      	movs	r3, #1
   d4630:	9304      	str	r3, [sp, #16]
   d4632:	2300      	movs	r3, #0
   d4634:	9303      	str	r3, [sp, #12]
   d4636:	9302      	str	r3, [sp, #8]
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	9300      	str	r3, [sp, #0]
   d463c:	461a      	mov	r2, r3
   d463e:	f7ff ff1d 	bl	d447c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d4642:	b007      	add	sp, #28
   d4644:	f85d fb04 	ldr.w	pc, [sp], #4

000d4648 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d4648:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d464c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d464e:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d4652:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d4656:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   d465a:	4604      	mov	r4, r0
   d465c:	468b      	mov	fp, r1
   d465e:	4691      	mov	r9, r2
   d4660:	469a      	mov	sl, r3
    if (isConnected()) {
   d4662:	f7ff fefd 	bl	d4460 <_ZN4MQTT11isConnectedEv>
   d4666:	2800      	cmp	r0, #0
   d4668:	d04c      	beq.n	d4704 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
   d466a:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d466e:	69e0      	ldr	r0, [r4, #28]
   d4670:	2100      	movs	r1, #0
   d4672:	f001 ff2a 	bl	d64ca <memset>

        length = writeString(topic, buffer, length);
   d4676:	2305      	movs	r3, #5
   d4678:	69e2      	ldr	r2, [r4, #28]
   d467a:	4659      	mov	r1, fp
   d467c:	4620      	mov	r0, r4
   d467e:	f7ff fed5 	bl	d442c <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
   d4682:	1e6b      	subs	r3, r5, #1
   d4684:	2b01      	cmp	r3, #1
   d4686:	d812      	bhi.n	d46ae <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
   d4688:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d468a:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
   d468c:	3301      	adds	r3, #1
   d468e:	b29b      	uxth	r3, r3
   d4690:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d4692:	121b      	asrs	r3, r3, #8
   d4694:	5413      	strb	r3, [r2, r0]
   d4696:	1c41      	adds	r1, r0, #1
   d4698:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
   d469a:	69e3      	ldr	r3, [r4, #28]
   d469c:	8c22      	ldrh	r2, [r4, #32]
   d469e:	545a      	strb	r2, [r3, r1]
   d46a0:	3002      	adds	r0, #2
   d46a2:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d46a4:	b11e      	cbz	r6, d46ae <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
   d46a6:	8c23      	ldrh	r3, [r4, #32]
   d46a8:	1c5a      	adds	r2, r3, #1
   d46aa:	8422      	strh	r2, [r4, #32]
   d46ac:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d46ae:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d46b0:	b291      	uxth	r1, r2
   d46b2:	1883      	adds	r3, r0, r2
   d46b4:	458a      	cmp	sl, r1
   d46b6:	b29b      	uxth	r3, r3
   d46b8:	d90a      	bls.n	d46d0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
   d46ba:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d46be:	429e      	cmp	r6, r3
   d46c0:	f102 0201 	add.w	r2, r2, #1
   d46c4:	d904      	bls.n	d46d0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
            buffer[length++] = payload[i];
   d46c6:	f819 6001 	ldrb.w	r6, [r9, r1]
   d46ca:	69e1      	ldr	r1, [r4, #28]
   d46cc:	54ce      	strb	r6, [r1, r3]
   d46ce:	e7ef      	b.n	d46b0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
   d46d0:	f1b8 0f00 	cmp.w	r8, #0
   d46d4:	bf0c      	ite	eq
   d46d6:	2130      	moveq	r1, #48	; 0x30
   d46d8:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
   d46da:	b10f      	cbz	r7, d46e0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x98>
            header |= DUP_FLAG_ON_MASK;
   d46dc:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
   d46e0:	2d02      	cmp	r5, #2
   d46e2:	d102      	bne.n	d46ea <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa2>
            header |= MQTTQOS2_HEADER_MASK;
   d46e4:	f041 0104 	orr.w	r1, r1, #4
   d46e8:	e003      	b.n	d46f2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xaa>
        else if (qos == QOS1)
   d46ea:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d46ec:	bf08      	it	eq
   d46ee:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d46f2:	3b05      	subs	r3, #5
   d46f4:	69e2      	ldr	r2, [r4, #28]
   d46f6:	b29b      	uxth	r3, r3
   d46f8:	4620      	mov	r0, r4
    }
    return false;
}
   d46fa:	b001      	add	sp, #4
   d46fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d4700:	f7ff be4d 	b.w	d439e <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d4704:	b001      	add	sp, #4
   d4706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d470a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d470a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d470c:	9c08      	ldr	r4, [sp, #32]
   d470e:	9403      	str	r4, [sp, #12]
   d4710:	2400      	movs	r4, #0
   d4712:	9402      	str	r4, [sp, #8]
   d4714:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d4718:	9401      	str	r4, [sp, #4]
   d471a:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d471e:	9400      	str	r4, [sp, #0]
   d4720:	f7ff ff92 	bl	d4648 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d4724:	b004      	add	sp, #16
   d4726:	bd10      	pop	{r4, pc}

000d4728 <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d4728:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d472a:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d472c:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d472e:	460e      	mov	r6, r1
   d4730:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d4732:	f001 ff0d 	bl	d6550 <strlen>
   d4736:	2300      	movs	r3, #0
   d4738:	9302      	str	r3, [sp, #8]
   d473a:	9301      	str	r3, [sp, #4]
   d473c:	9300      	str	r3, [sp, #0]
   d473e:	4622      	mov	r2, r4
   d4740:	4603      	mov	r3, r0
   d4742:	4631      	mov	r1, r6
   d4744:	4628      	mov	r0, r5
   d4746:	f7ff ffe0 	bl	d470a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d474a:	b004      	add	sp, #16
   d474c:	bd70      	pop	{r4, r5, r6, pc}

000d474e <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
   d474e:	b538      	push	{r3, r4, r5, lr}
   d4750:	4604      	mov	r4, r0
   d4752:	460d      	mov	r5, r1
    if (isConnected()) {
   d4754:	f7ff fe84 	bl	d4460 <_ZN4MQTT11isConnectedEv>
   d4758:	b190      	cbz	r0, d4780 <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d475a:	69e3      	ldr	r3, [r4, #28]
   d475c:	2262      	movs	r2, #98	; 0x62
   d475e:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d4760:	69e3      	ldr	r3, [r4, #28]
   d4762:	2202      	movs	r2, #2
   d4764:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d4766:	69e3      	ldr	r3, [r4, #28]
   d4768:	122a      	asrs	r2, r5, #8
   d476a:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d476c:	69e3      	ldr	r3, [r4, #28]
   d476e:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d4770:	2204      	movs	r2, #4
   d4772:	69e1      	ldr	r1, [r4, #28]
   d4774:	4620      	mov	r0, r4
   d4776:	f001 f904 	bl	d5982 <_ZN9TCPClient5writeEPKhj>
   d477a:	3000      	adds	r0, #0
   d477c:	bf18      	it	ne
   d477e:	2001      	movne	r0, #1
    }
    return false;
}
   d4780:	bd38      	pop	{r3, r4, r5, pc}

000d4782 <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
   d4782:	b538      	push	{r3, r4, r5, lr}
   d4784:	4604      	mov	r4, r0
   d4786:	460d      	mov	r5, r1
    if (isConnected()) {
   d4788:	f7ff fe6a 	bl	d4460 <_ZN4MQTT11isConnectedEv>
   d478c:	b190      	cbz	r0, d47b4 <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d478e:	69e3      	ldr	r3, [r4, #28]
   d4790:	2272      	movs	r2, #114	; 0x72
   d4792:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d4794:	69e3      	ldr	r3, [r4, #28]
   d4796:	2202      	movs	r2, #2
   d4798:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d479a:	69e3      	ldr	r3, [r4, #28]
   d479c:	122a      	asrs	r2, r5, #8
   d479e:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d47a0:	69e3      	ldr	r3, [r4, #28]
   d47a2:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d47a4:	2204      	movs	r2, #4
   d47a6:	69e1      	ldr	r1, [r4, #28]
   d47a8:	4620      	mov	r0, r4
   d47aa:	f001 f8ea 	bl	d5982 <_ZN9TCPClient5writeEPKhj>
   d47ae:	3000      	adds	r0, #0
   d47b0:	bf18      	it	ne
   d47b2:	2001      	movne	r0, #1
    }
    return false;
}
   d47b4:	bd38      	pop	{r3, r4, r5, pc}

000d47b6 <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
   d47b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d47ba:	b083      	sub	sp, #12
   d47bc:	af00      	add	r7, sp, #0
   d47be:	4604      	mov	r4, r0
    if (isConnected()) {
   d47c0:	f7ff fe4e 	bl	d4460 <_ZN4MQTT11isConnectedEv>
   d47c4:	4681      	mov	r9, r0
   d47c6:	2800      	cmp	r0, #0
   d47c8:	f000 80f6 	beq.w	d49b8 <_ZN4MQTT4loopEv+0x202>
   d47cc:	f000 f98a 	bl	d4ae4 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d47d0:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d47d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d47d6:	4353      	muls	r3, r2
   d47d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d47da:	1a82      	subs	r2, r0, r2
   d47dc:	429a      	cmp	r2, r3
   d47de:	4605      	mov	r5, r0
   d47e0:	d803      	bhi.n	d47ea <_ZN4MQTT4loopEv+0x34>
   d47e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d47e4:	1a82      	subs	r2, r0, r2
   d47e6:	4293      	cmp	r3, r2
   d47e8:	d217      	bcs.n	d481a <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
   d47ea:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d47ee:	b12b      	cbz	r3, d47fc <_ZN4MQTT4loopEv+0x46>
                _client.stop();
   d47f0:	4620      	mov	r0, r4
   d47f2:	f001 fab0 	bl	d5d56 <_ZN9TCPClient4stopEv>
                return false;
   d47f6:	f04f 0900 	mov.w	r9, #0
   d47fa:	e0dd      	b.n	d49b8 <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
   d47fc:	69e2      	ldr	r2, [r4, #28]
   d47fe:	21c0      	movs	r1, #192	; 0xc0
   d4800:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d4802:	69e2      	ldr	r2, [r4, #28]
   d4804:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d4806:	69e1      	ldr	r1, [r4, #28]
   d4808:	2202      	movs	r2, #2
   d480a:	4620      	mov	r0, r4
   d480c:	f001 f8b9 	bl	d5982 <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
   d4810:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
   d4812:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
   d4814:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
   d4816:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
   d481a:	4620      	mov	r0, r4
   d481c:	f001 fab2 	bl	d5d84 <_ZN9TCPClient9availableEv>
   d4820:	2800      	cmp	r0, #0
   d4822:	f000 80c9 	beq.w	d49b8 <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d4826:	1df9      	adds	r1, r7, #7
   d4828:	4620      	mov	r0, r4
   d482a:	f7ff fd5f 	bl	d42ec <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   d482e:	4602      	mov	r2, r0
   d4830:	2800      	cmp	r0, #0
   d4832:	f000 80c1 	beq.w	d49b8 <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
   d4836:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
   d4838:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d483a:	7818      	ldrb	r0, [r3, #0]
   d483c:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d4840:	2930      	cmp	r1, #48	; 0x30
   d4842:	d17d      	bne.n	d4940 <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
   d4844:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
   d4848:	f1bb 0f00 	cmp.w	fp, #0
   d484c:	f000 80b4 	beq.w	d49b8 <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d4850:	f897 c007 	ldrb.w	ip, [r7, #7]
   d4854:	eb03 000c 	add.w	r0, r3, ip
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   d4858:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d485a:	7881      	ldrb	r1, [r0, #2]
   d485c:	f890 e001 	ldrb.w	lr, [r0, #1]
   d4860:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
   d4864:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
   d4868:	f10e 0108 	add.w	r1, lr, #8
   d486c:	f021 0107 	bic.w	r1, r1, #7
   d4870:	ebad 0d01 	sub.w	sp, sp, r1
   d4874:	4668      	mov	r0, sp
   d4876:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
   d4878:	b28e      	uxth	r6, r1
   d487a:	45b6      	cmp	lr, r6
   d487c:	d906      	bls.n	d488c <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
   d487e:	eb0c 0601 	add.w	r6, ip, r1
   d4882:	441e      	add	r6, r3
   d4884:	78f6      	ldrb	r6, [r6, #3]
   d4886:	5446      	strb	r6, [r0, r1]
   d4888:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
   d488a:	e7f5      	b.n	d4878 <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
   d488c:	2100      	movs	r1, #0
   d488e:	f800 100e 	strb.w	r1, [r0, lr]
   d4892:	781e      	ldrb	r6, [r3, #0]
   d4894:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d4898:	2e02      	cmp	r6, #2
   d489a:	f10c 0103 	add.w	r1, ip, #3
   d489e:	ebcc 0202 	rsb	r2, ip, r2
   d48a2:	d11e      	bne.n	d48e2 <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d48a4:	4471      	add	r1, lr
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d48a6:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d48aa:	f813 8001 	ldrb.w	r8, [r3, r1]
   d48ae:	4419      	add	r1, r3
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d48b0:	3a05      	subs	r2, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d48b2:	7849      	ldrb	r1, [r1, #1]
   d48b4:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d48b8:	f10c 0105 	add.w	r1, ip, #5
   d48bc:	4471      	add	r1, lr
   d48be:	4419      	add	r1, r3
   d48c0:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d48c2:	69e3      	ldr	r3, [r4, #28]
   d48c4:	2240      	movs	r2, #64	; 0x40
   d48c6:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d48c8:	69e3      	ldr	r3, [r4, #28]
   d48ca:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d48cc:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d48ce:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
   d48d2:	ea4f 2228 	mov.w	r2, r8, asr #8
   d48d6:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d48d8:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
   d48da:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
   d48dc:	f883 8003 	strb.w	r8, [r3, #3]
   d48e0:	e020      	b.n	d4924 <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d48e2:	2e04      	cmp	r6, #4
   d48e4:	d124      	bne.n	d4930 <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d48e6:	4471      	add	r1, lr
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d48e8:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d48ec:	f813 8001 	ldrb.w	r8, [r3, r1]
   d48f0:	4419      	add	r1, r3
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d48f2:	3a05      	subs	r2, #5
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d48f4:	7849      	ldrb	r1, [r1, #1]
   d48f6:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d48fa:	f10c 0105 	add.w	r1, ip, #5
   d48fe:	4471      	add	r1, lr
   d4900:	4419      	add	r1, r3
   d4902:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
   d4904:	69e3      	ldr	r3, [r4, #28]
   d4906:	2250      	movs	r2, #80	; 0x50
   d4908:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
   d490a:	69e3      	ldr	r3, [r4, #28]
   d490c:	2202      	movs	r2, #2
   d490e:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
   d4910:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4912:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
   d4916:	ea4f 2228 	mov.w	r2, r8, asr #8
   d491a:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
   d491c:	69e3      	ldr	r3, [r4, #28]
              							_client.write(buffer, 4);
   d491e:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
   d4920:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
   d4924:	69e1      	ldr	r1, [r4, #28]
   d4926:	4620      	mov	r0, r4
   d4928:	f001 f82b 	bl	d5982 <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
   d492c:	6265      	str	r5, [r4, #36]	; 0x24
   d492e:	e005      	b.n	d493c <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   d4930:	3a03      	subs	r2, #3
   d4932:	4471      	add	r1, lr
   d4934:	ebce 0202 	rsb	r2, lr, r2
   d4938:	4419      	add	r1, r3
   d493a:	47d8      	blx	fp
   d493c:	46d5      	mov	sp, sl
   d493e:	e03b      	b.n	d49b8 <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
   d4940:	2950      	cmp	r1, #80	; 0x50
   d4942:	d108      	bne.n	d4956 <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
   d4944:	7899      	ldrb	r1, [r3, #2]
   d4946:	78db      	ldrb	r3, [r3, #3]
   d4948:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d494c:	b289      	uxth	r1, r1
   d494e:	4620      	mov	r0, r4
   d4950:	f7ff fefd 	bl	d474e <_ZN4MQTT14publishReleaseEt>
   d4954:	e030      	b.n	d49b8 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
   d4956:	2940      	cmp	r1, #64	; 0x40
   d4958:	d00c      	beq.n	d4974 <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
   d495a:	2960      	cmp	r1, #96	; 0x60
   d495c:	d108      	bne.n	d4970 <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
   d495e:	7899      	ldrb	r1, [r3, #2]
   d4960:	78db      	ldrb	r3, [r3, #3]
   d4962:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d4966:	b289      	uxth	r1, r1
   d4968:	4620      	mov	r0, r4
   d496a:	f7ff ff0a 	bl	d4782 <_ZN4MQTT15publishCompleteEt>
   d496e:	e023      	b.n	d49b8 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
   d4970:	2970      	cmp	r1, #112	; 0x70
   d4972:	d10d      	bne.n	d4990 <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
   d4974:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d4976:	b1f9      	cbz	r1, d49b8 <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d4978:	2a04      	cmp	r2, #4
   d497a:	d11d      	bne.n	d49b8 <_ZN4MQTT4loopEv+0x202>
   d497c:	f010 0f06 	tst.w	r0, #6
   d4980:	d11a      	bne.n	d49b8 <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
   d4982:	7898      	ldrb	r0, [r3, #2]
   d4984:	78db      	ldrb	r3, [r3, #3]
   d4986:	eb03 2000 	add.w	r0, r3, r0, lsl #8
   d498a:	b280      	uxth	r0, r0
   d498c:	4788      	blx	r1
   d498e:	e013      	b.n	d49b8 <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
   d4990:	2990      	cmp	r1, #144	; 0x90
   d4992:	d011      	beq.n	d49b8 <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
   d4994:	29c0      	cmp	r1, #192	; 0xc0
   d4996:	d10a      	bne.n	d49ae <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
   d4998:	22d0      	movs	r2, #208	; 0xd0
   d499a:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d499c:	69e3      	ldr	r3, [r4, #28]
   d499e:	2200      	movs	r2, #0
   d49a0:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d49a2:	69e1      	ldr	r1, [r4, #28]
   d49a4:	2202      	movs	r2, #2
   d49a6:	4620      	mov	r0, r4
   d49a8:	f000 ffeb 	bl	d5982 <_ZN9TCPClient5writeEPKhj>
   d49ac:	e004      	b.n	d49b8 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
   d49ae:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
   d49b0:	bf04      	itt	eq
   d49b2:	2300      	moveq	r3, #0
   d49b4:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
   d49b8:	4648      	mov	r0, r9
   d49ba:	370c      	adds	r7, #12
   d49bc:	46bd      	mov	sp, r7
   d49be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d49c2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d49c2:	b570      	push	{r4, r5, r6, lr}
   d49c4:	4604      	mov	r4, r0
   d49c6:	460e      	mov	r6, r1
   d49c8:	4615      	mov	r5, r2

    if (isConnected()) {
   d49ca:	f7ff fd49 	bl	d4460 <_ZN4MQTT11isConnectedEv>
   d49ce:	b1e8      	cbz	r0, d4a0c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   d49d0:	8c23      	ldrh	r3, [r4, #32]
   d49d2:	3301      	adds	r3, #1
   d49d4:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d49d6:	b903      	cbnz	r3, d49da <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
   d49d8:	2301      	movs	r3, #1
   d49da:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
   d49dc:	8c23      	ldrh	r3, [r4, #32]
   d49de:	69e2      	ldr	r2, [r4, #28]
   d49e0:	121b      	asrs	r3, r3, #8
   d49e2:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d49e4:	69e3      	ldr	r3, [r4, #28]
   d49e6:	8c22      	ldrh	r2, [r4, #32]
   d49e8:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d49ea:	69e2      	ldr	r2, [r4, #28]
   d49ec:	4631      	mov	r1, r6
   d49ee:	2307      	movs	r3, #7
   d49f0:	4620      	mov	r0, r4
   d49f2:	f7ff fd1b 	bl	d442c <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d49f6:	69e3      	ldr	r3, [r4, #28]
   d49f8:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d49fa:	1f03      	subs	r3, r0, #4
   d49fc:	69e2      	ldr	r2, [r4, #28]
   d49fe:	4620      	mov	r0, r4
   d4a00:	b29b      	uxth	r3, r3
   d4a02:	2182      	movs	r1, #130	; 0x82
    }
    return false;
}
   d4a04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d4a08:	f7ff bcc9 	b.w	d439e <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d4a0c:	bd70      	pop	{r4, r5, r6, pc}

000d4a0e <_ZN4MQTT9subscribeEPKc>:
    lastOutActivity = millis();
    return (rc == 1+llen+length);
}

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
   d4a0e:	2200      	movs	r2, #0
   d4a10:	f7ff bfd7 	b.w	d49c2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000d4a14 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d4a14:	b510      	push	{r4, lr}
   d4a16:	4604      	mov	r4, r0
    if (isConnected()) {
   d4a18:	f7ff fd22 	bl	d4460 <_ZN4MQTT11isConnectedEv>
   d4a1c:	b110      	cbz	r0, d4a24 <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d4a1e:	4620      	mov	r0, r4
   d4a20:	f7ff fcf0 	bl	d4404 <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
   d4a24:	69e0      	ldr	r0, [r4, #28]
   d4a26:	b108      	cbz	r0, d4a2c <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d4a28:	f7ff fb3b 	bl	d40a2 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d4a2c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4a30:	f000 fb1d 	bl	d506e <_ZN6StringD1Ev>
   d4a34:	4620      	mov	r0, r4
   d4a36:	f7ff fbe5 	bl	d4204 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
   d4a3a:	4620      	mov	r0, r4
   d4a3c:	bd10      	pop	{r4, pc}

000d4a3e <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d4a3e:	f000 b811 	b.w	d4a64 <HAL_Pin_Map>
	...

000d4a44 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <netdb_freeaddrinfo+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	689b      	ldr	r3, [r3, #8]
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	00030268 	.word	0x00030268

000d4a54 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <netdb_getaddrinfo+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	68db      	ldr	r3, [r3, #12]
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	00030268 	.word	0x00030268

000d4a64 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <HAL_Pin_Map+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	681b      	ldr	r3, [r3, #0]
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	0003022c 	.word	0x0003022c

000d4a74 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <HAL_Pin_Mode+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	689b      	ldr	r3, [r3, #8]
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	0003022c 	.word	0x0003022c

000d4a84 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <HAL_Get_Pin_Mode+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	68db      	ldr	r3, [r3, #12]
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	0003022c 	.word	0x0003022c

000d4a94 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <HAL_GPIO_Read+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	695b      	ldr	r3, [r3, #20]
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	0003022c 	.word	0x0003022c

000d4aa4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <HAL_SPI_Init+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	69db      	ldr	r3, [r3, #28]
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	00030230 	.word	0x00030230

000d4ab4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <HAL_SPI_Is_Enabled+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	6a1b      	ldr	r3, [r3, #32]
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	00030230 	.word	0x00030230

000d4ac4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <if_index_to_name+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	695b      	ldr	r3, [r3, #20]
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	0003026c 	.word	0x0003026c

000d4ad4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <HAL_RNG_GetRandomNumber+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	685b      	ldr	r3, [r3, #4]
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	00030218 	.word	0x00030218

000d4ae4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	695b      	ldr	r3, [r3, #20]
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	00030218 	.word	0x00030218

000d4af4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4af4:	b508      	push	{r3, lr}
   d4af6:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <HAL_RTC_Get_UnixTime+0xc>)
   d4af8:	681b      	ldr	r3, [r3, #0]
   d4afa:	69db      	ldr	r3, [r3, #28]
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	bd08      	pop	{r3, pc}
   d4b00:	00030218 	.word	0x00030218

000d4b04 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4b04:	b508      	push	{r3, lr}
   d4b06:	4b02      	ldr	r3, [pc, #8]	; (d4b10 <HAL_RTC_Time_Is_Valid+0xc>)
   d4b08:	681b      	ldr	r3, [r3, #0]
   d4b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4b0c:	9301      	str	r3, [sp, #4]
   d4b0e:	bd08      	pop	{r3, pc}
   d4b10:	00030218 	.word	0x00030218

000d4b14 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4b14:	b508      	push	{r3, lr}
   d4b16:	4b02      	ldr	r3, [pc, #8]	; (d4b20 <os_thread_is_current+0xc>)
   d4b18:	681b      	ldr	r3, [r3, #0]
   d4b1a:	689b      	ldr	r3, [r3, #8]
   d4b1c:	9301      	str	r3, [sp, #4]
   d4b1e:	bd08      	pop	{r3, pc}
   d4b20:	00030248 	.word	0x00030248

000d4b24 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4b24:	b508      	push	{r3, lr}
   d4b26:	4b02      	ldr	r3, [pc, #8]	; (d4b30 <os_thread_join+0xc>)
   d4b28:	681b      	ldr	r3, [r3, #0]
   d4b2a:	691b      	ldr	r3, [r3, #16]
   d4b2c:	9301      	str	r3, [sp, #4]
   d4b2e:	bd08      	pop	{r3, pc}
   d4b30:	00030248 	.word	0x00030248

000d4b34 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4b34:	b508      	push	{r3, lr}
   d4b36:	4b02      	ldr	r3, [pc, #8]	; (d4b40 <os_thread_cleanup+0xc>)
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	695b      	ldr	r3, [r3, #20]
   d4b3c:	9301      	str	r3, [sp, #4]
   d4b3e:	bd08      	pop	{r3, pc}
   d4b40:	00030248 	.word	0x00030248

000d4b44 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <os_mutex_create+0xc>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b4c:	9301      	str	r3, [sp, #4]
   d4b4e:	bd08      	pop	{r3, pc}
   d4b50:	00030248 	.word	0x00030248

000d4b54 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <os_mutex_recursive_create+0xc>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	00030248 	.word	0x00030248

000d4b64 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b02      	ldr	r3, [pc, #8]	; (d4b70 <inet_inet_ntop+0xc>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	695b      	ldr	r3, [r3, #20]
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	00030264 	.word	0x00030264

000d4b74 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b02      	ldr	r3, [pc, #8]	; (d4b80 <inet_htonl+0xc>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	6a1b      	ldr	r3, [r3, #32]
   d4b7c:	9301      	str	r3, [sp, #4]
   d4b7e:	bd08      	pop	{r3, pc}
   d4b80:	00030264 	.word	0x00030264

000d4b84 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4b84:	b508      	push	{r3, lr}
   d4b86:	4b02      	ldr	r3, [pc, #8]	; (d4b90 <inet_htons+0xc>)
   d4b88:	681b      	ldr	r3, [r3, #0]
   d4b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b8c:	9301      	str	r3, [sp, #4]
   d4b8e:	bd08      	pop	{r3, pc}
   d4b90:	00030264 	.word	0x00030264

000d4b94 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4b94:	b508      	push	{r3, lr}
   d4b96:	4b02      	ldr	r3, [pc, #8]	; (d4ba0 <HAL_USART_Init+0xc>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	681b      	ldr	r3, [r3, #0]
   d4b9c:	9301      	str	r3, [sp, #4]
   d4b9e:	bd08      	pop	{r3, pc}
   d4ba0:	0003023c 	.word	0x0003023c

000d4ba4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4ba4:	b508      	push	{r3, lr}
   d4ba6:	4b02      	ldr	r3, [pc, #8]	; (d4bb0 <HAL_USART_Write_Data+0xc>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	68db      	ldr	r3, [r3, #12]
   d4bac:	9301      	str	r3, [sp, #4]
   d4bae:	bd08      	pop	{r3, pc}
   d4bb0:	0003023c 	.word	0x0003023c

000d4bb4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b02      	ldr	r3, [pc, #8]	; (d4bc0 <HAL_USART_Available_Data+0xc>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	691b      	ldr	r3, [r3, #16]
   d4bbc:	9301      	str	r3, [sp, #4]
   d4bbe:	bd08      	pop	{r3, pc}
   d4bc0:	0003023c 	.word	0x0003023c

000d4bc4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4bc4:	b508      	push	{r3, lr}
   d4bc6:	4b02      	ldr	r3, [pc, #8]	; (d4bd0 <HAL_USART_Read_Data+0xc>)
   d4bc8:	681b      	ldr	r3, [r3, #0]
   d4bca:	695b      	ldr	r3, [r3, #20]
   d4bcc:	9301      	str	r3, [sp, #4]
   d4bce:	bd08      	pop	{r3, pc}
   d4bd0:	0003023c 	.word	0x0003023c

000d4bd4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4bd4:	b508      	push	{r3, lr}
   d4bd6:	4b02      	ldr	r3, [pc, #8]	; (d4be0 <HAL_USART_Peek_Data+0xc>)
   d4bd8:	681b      	ldr	r3, [r3, #0]
   d4bda:	699b      	ldr	r3, [r3, #24]
   d4bdc:	9301      	str	r3, [sp, #4]
   d4bde:	bd08      	pop	{r3, pc}
   d4be0:	0003023c 	.word	0x0003023c

000d4be4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4be4:	b508      	push	{r3, lr}
   d4be6:	4b02      	ldr	r3, [pc, #8]	; (d4bf0 <HAL_USART_Flush_Data+0xc>)
   d4be8:	681b      	ldr	r3, [r3, #0]
   d4bea:	69db      	ldr	r3, [r3, #28]
   d4bec:	9301      	str	r3, [sp, #4]
   d4bee:	bd08      	pop	{r3, pc}
   d4bf0:	0003023c 	.word	0x0003023c

000d4bf4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4bf4:	b508      	push	{r3, lr}
   d4bf6:	4b02      	ldr	r3, [pc, #8]	; (d4c00 <HAL_USART_Is_Enabled+0xc>)
   d4bf8:	681b      	ldr	r3, [r3, #0]
   d4bfa:	6a1b      	ldr	r3, [r3, #32]
   d4bfc:	9301      	str	r3, [sp, #4]
   d4bfe:	bd08      	pop	{r3, pc}
   d4c00:	0003023c 	.word	0x0003023c

000d4c04 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4c04:	b508      	push	{r3, lr}
   d4c06:	4b02      	ldr	r3, [pc, #8]	; (d4c10 <HAL_USART_Available_Data_For_Write+0xc>)
   d4c08:	681b      	ldr	r3, [r3, #0]
   d4c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4c0c:	9301      	str	r3, [sp, #4]
   d4c0e:	bd08      	pop	{r3, pc}
   d4c10:	0003023c 	.word	0x0003023c

000d4c14 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4c14:	b508      	push	{r3, lr}
   d4c16:	4b02      	ldr	r3, [pc, #8]	; (d4c20 <HAL_I2C_Write_Data+0xc>)
   d4c18:	681b      	ldr	r3, [r3, #0]
   d4c1a:	6a1b      	ldr	r3, [r3, #32]
   d4c1c:	9301      	str	r3, [sp, #4]
   d4c1e:	bd08      	pop	{r3, pc}
   d4c20:	00030228 	.word	0x00030228

000d4c24 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4c24:	b508      	push	{r3, lr}
   d4c26:	4b02      	ldr	r3, [pc, #8]	; (d4c30 <HAL_I2C_Available_Data+0xc>)
   d4c28:	681b      	ldr	r3, [r3, #0]
   d4c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4c2c:	9301      	str	r3, [sp, #4]
   d4c2e:	bd08      	pop	{r3, pc}
   d4c30:	00030228 	.word	0x00030228

000d4c34 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4c34:	b508      	push	{r3, lr}
   d4c36:	4b02      	ldr	r3, [pc, #8]	; (d4c40 <HAL_I2C_Read_Data+0xc>)
   d4c38:	681b      	ldr	r3, [r3, #0]
   d4c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4c3c:	9301      	str	r3, [sp, #4]
   d4c3e:	bd08      	pop	{r3, pc}
   d4c40:	00030228 	.word	0x00030228

000d4c44 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4c44:	b508      	push	{r3, lr}
   d4c46:	4b02      	ldr	r3, [pc, #8]	; (d4c50 <HAL_I2C_Peek_Data+0xc>)
   d4c48:	681b      	ldr	r3, [r3, #0]
   d4c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4c4c:	9301      	str	r3, [sp, #4]
   d4c4e:	bd08      	pop	{r3, pc}
   d4c50:	00030228 	.word	0x00030228

000d4c54 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4c54:	b508      	push	{r3, lr}
   d4c56:	4b02      	ldr	r3, [pc, #8]	; (d4c60 <HAL_I2C_Flush_Data+0xc>)
   d4c58:	681b      	ldr	r3, [r3, #0]
   d4c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c5c:	9301      	str	r3, [sp, #4]
   d4c5e:	bd08      	pop	{r3, pc}
   d4c60:	00030228 	.word	0x00030228

000d4c64 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4c64:	b508      	push	{r3, lr}
   d4c66:	4b02      	ldr	r3, [pc, #8]	; (d4c70 <HAL_I2C_Is_Enabled+0xc>)
   d4c68:	681b      	ldr	r3, [r3, #0]
   d4c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c6c:	9301      	str	r3, [sp, #4]
   d4c6e:	bd08      	pop	{r3, pc}
   d4c70:	00030228 	.word	0x00030228

000d4c74 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4c74:	b508      	push	{r3, lr}
   d4c76:	4b02      	ldr	r3, [pc, #8]	; (d4c80 <HAL_I2C_Init+0xc>)
   d4c78:	681b      	ldr	r3, [r3, #0]
   d4c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4c7c:	9301      	str	r3, [sp, #4]
   d4c7e:	bd08      	pop	{r3, pc}
   d4c80:	00030228 	.word	0x00030228

000d4c84 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4c84:	b508      	push	{r3, lr}
   d4c86:	4b02      	ldr	r3, [pc, #8]	; (d4c90 <sock_setsockopt+0xc>)
   d4c88:	681b      	ldr	r3, [r3, #0]
   d4c8a:	699b      	ldr	r3, [r3, #24]
   d4c8c:	9301      	str	r3, [sp, #4]
   d4c8e:	bd08      	pop	{r3, pc}
   d4c90:	00030238 	.word	0x00030238

000d4c94 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4c94:	b508      	push	{r3, lr}
   d4c96:	4b02      	ldr	r3, [pc, #8]	; (d4ca0 <sock_close+0xc>)
   d4c98:	681b      	ldr	r3, [r3, #0]
   d4c9a:	69db      	ldr	r3, [r3, #28]
   d4c9c:	9301      	str	r3, [sp, #4]
   d4c9e:	bd08      	pop	{r3, pc}
   d4ca0:	00030238 	.word	0x00030238

000d4ca4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d4ca4:	b508      	push	{r3, lr}
   d4ca6:	4b02      	ldr	r3, [pc, #8]	; (d4cb0 <sock_connect+0xc>)
   d4ca8:	681b      	ldr	r3, [r3, #0]
   d4caa:	6a1b      	ldr	r3, [r3, #32]
   d4cac:	9301      	str	r3, [sp, #4]
   d4cae:	bd08      	pop	{r3, pc}
   d4cb0:	00030238 	.word	0x00030238

000d4cb4 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d4cb4:	b508      	push	{r3, lr}
   d4cb6:	4b02      	ldr	r3, [pc, #8]	; (d4cc0 <sock_recv+0xc>)
   d4cb8:	681b      	ldr	r3, [r3, #0]
   d4cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4cbc:	9301      	str	r3, [sp, #4]
   d4cbe:	bd08      	pop	{r3, pc}
   d4cc0:	00030238 	.word	0x00030238

000d4cc4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d4cc4:	b508      	push	{r3, lr}
   d4cc6:	4b02      	ldr	r3, [pc, #8]	; (d4cd0 <sock_send+0xc>)
   d4cc8:	681b      	ldr	r3, [r3, #0]
   d4cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ccc:	9301      	str	r3, [sp, #4]
   d4cce:	bd08      	pop	{r3, pc}
   d4cd0:	00030238 	.word	0x00030238

000d4cd4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4cd4:	b508      	push	{r3, lr}
   d4cd6:	4b02      	ldr	r3, [pc, #8]	; (d4ce0 <sock_socket+0xc>)
   d4cd8:	681b      	ldr	r3, [r3, #0]
   d4cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4cdc:	9301      	str	r3, [sp, #4]
   d4cde:	bd08      	pop	{r3, pc}
   d4ce0:	00030238 	.word	0x00030238

000d4ce4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4ce4:	b508      	push	{r3, lr}
   d4ce6:	4b02      	ldr	r3, [pc, #8]	; (d4cf0 <HAL_USB_USART_Init+0xc>)
   d4ce8:	681b      	ldr	r3, [r3, #0]
   d4cea:	681b      	ldr	r3, [r3, #0]
   d4cec:	9301      	str	r3, [sp, #4]
   d4cee:	bd08      	pop	{r3, pc}
   d4cf0:	0003024c 	.word	0x0003024c

000d4cf4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4cf4:	b508      	push	{r3, lr}
   d4cf6:	4b02      	ldr	r3, [pc, #8]	; (d4d00 <HAL_USB_USART_Available_Data+0xc>)
   d4cf8:	681b      	ldr	r3, [r3, #0]
   d4cfa:	691b      	ldr	r3, [r3, #16]
   d4cfc:	9301      	str	r3, [sp, #4]
   d4cfe:	bd08      	pop	{r3, pc}
   d4d00:	0003024c 	.word	0x0003024c

000d4d04 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4d04:	b508      	push	{r3, lr}
   d4d06:	4b02      	ldr	r3, [pc, #8]	; (d4d10 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4d08:	681b      	ldr	r3, [r3, #0]
   d4d0a:	695b      	ldr	r3, [r3, #20]
   d4d0c:	9301      	str	r3, [sp, #4]
   d4d0e:	bd08      	pop	{r3, pc}
   d4d10:	0003024c 	.word	0x0003024c

000d4d14 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4d14:	b508      	push	{r3, lr}
   d4d16:	4b02      	ldr	r3, [pc, #8]	; (d4d20 <HAL_USB_USART_Receive_Data+0xc>)
   d4d18:	681b      	ldr	r3, [r3, #0]
   d4d1a:	699b      	ldr	r3, [r3, #24]
   d4d1c:	9301      	str	r3, [sp, #4]
   d4d1e:	bd08      	pop	{r3, pc}
   d4d20:	0003024c 	.word	0x0003024c

000d4d24 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4d24:	b508      	push	{r3, lr}
   d4d26:	4b02      	ldr	r3, [pc, #8]	; (d4d30 <HAL_USB_USART_Send_Data+0xc>)
   d4d28:	681b      	ldr	r3, [r3, #0]
   d4d2a:	69db      	ldr	r3, [r3, #28]
   d4d2c:	9301      	str	r3, [sp, #4]
   d4d2e:	bd08      	pop	{r3, pc}
   d4d30:	0003024c 	.word	0x0003024c

000d4d34 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4d34:	b508      	push	{r3, lr}
   d4d36:	4b02      	ldr	r3, [pc, #8]	; (d4d40 <HAL_USB_USART_Flush_Data+0xc>)
   d4d38:	681b      	ldr	r3, [r3, #0]
   d4d3a:	6a1b      	ldr	r3, [r3, #32]
   d4d3c:	9301      	str	r3, [sp, #4]
   d4d3e:	bd08      	pop	{r3, pc}
   d4d40:	0003024c 	.word	0x0003024c

000d4d44 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <LED_SetSignalingColor+0xc>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	685b      	ldr	r3, [r3, #4]
   d4d4c:	9301      	str	r3, [sp, #4]
   d4d4e:	bd08      	pop	{r3, pc}
   d4d50:	00030260 	.word	0x00030260

000d4d54 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <LED_Signaling_Start+0xc>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	689b      	ldr	r3, [r3, #8]
   d4d5c:	9301      	str	r3, [sp, #4]
   d4d5e:	bd08      	pop	{r3, pc}
   d4d60:	00030260 	.word	0x00030260

000d4d64 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d4d64:	b508      	push	{r3, lr}
   d4d66:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <LED_Signaling_Stop+0xc>)
   d4d68:	681b      	ldr	r3, [r3, #0]
   d4d6a:	68db      	ldr	r3, [r3, #12]
   d4d6c:	9301      	str	r3, [sp, #4]
   d4d6e:	bd08      	pop	{r3, pc}
   d4d70:	00030260 	.word	0x00030260

000d4d74 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <LED_RGB_IsOverRidden+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	699b      	ldr	r3, [r3, #24]
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	00030260 	.word	0x00030260

000d4d84 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <LED_On+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	69db      	ldr	r3, [r3, #28]
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	00030260 	.word	0x00030260

000d4d94 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <log_message+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	00030260 	.word	0x00030260

000d4da4 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <system_mode+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	681b      	ldr	r3, [r3, #0]
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	00030220 	.word	0x00030220

000d4db4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <set_system_mode+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	685b      	ldr	r3, [r3, #4]
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	00030220 	.word	0x00030220

000d4dc4 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <system_thread_get_state+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	00030220 	.word	0x00030220

000d4dd4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b03      	ldr	r3, [pc, #12]	; (d4de4 <system_ctrl_set_app_request_handler+0x10>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4dde:	9301      	str	r3, [sp, #4]
   d4de0:	bd08      	pop	{r3, pc}
   d4de2:	0000      	.short	0x0000
   d4de4:	00030220 	.word	0x00030220

000d4de8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4de8:	b508      	push	{r3, lr}
   d4dea:	4b03      	ldr	r3, [pc, #12]	; (d4df8 <system_ctrl_set_result+0x10>)
   d4dec:	681b      	ldr	r3, [r3, #0]
   d4dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4df2:	9301      	str	r3, [sp, #4]
   d4df4:	bd08      	pop	{r3, pc}
   d4df6:	0000      	.short	0x0000
   d4df8:	00030220 	.word	0x00030220

000d4dfc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4dfc:	b508      	push	{r3, lr}
   d4dfe:	4b02      	ldr	r3, [pc, #8]	; (d4e08 <network_connect+0xc>)
   d4e00:	681b      	ldr	r3, [r3, #0]
   d4e02:	685b      	ldr	r3, [r3, #4]
   d4e04:	9301      	str	r3, [sp, #4]
   d4e06:	bd08      	pop	{r3, pc}
   d4e08:	00030240 	.word	0x00030240

000d4e0c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4e0c:	b508      	push	{r3, lr}
   d4e0e:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <network_connecting+0xc>)
   d4e10:	681b      	ldr	r3, [r3, #0]
   d4e12:	689b      	ldr	r3, [r3, #8]
   d4e14:	9301      	str	r3, [sp, #4]
   d4e16:	bd08      	pop	{r3, pc}
   d4e18:	00030240 	.word	0x00030240

000d4e1c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4e1c:	b508      	push	{r3, lr}
   d4e1e:	4b02      	ldr	r3, [pc, #8]	; (d4e28 <network_disconnect+0xc>)
   d4e20:	681b      	ldr	r3, [r3, #0]
   d4e22:	68db      	ldr	r3, [r3, #12]
   d4e24:	9301      	str	r3, [sp, #4]
   d4e26:	bd08      	pop	{r3, pc}
   d4e28:	00030240 	.word	0x00030240

000d4e2c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4e2c:	b508      	push	{r3, lr}
   d4e2e:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <network_ready+0xc>)
   d4e30:	681b      	ldr	r3, [r3, #0]
   d4e32:	691b      	ldr	r3, [r3, #16]
   d4e34:	9301      	str	r3, [sp, #4]
   d4e36:	bd08      	pop	{r3, pc}
   d4e38:	00030240 	.word	0x00030240

000d4e3c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4e3c:	b508      	push	{r3, lr}
   d4e3e:	4b02      	ldr	r3, [pc, #8]	; (d4e48 <network_on+0xc>)
   d4e40:	681b      	ldr	r3, [r3, #0]
   d4e42:	695b      	ldr	r3, [r3, #20]
   d4e44:	9301      	str	r3, [sp, #4]
   d4e46:	bd08      	pop	{r3, pc}
   d4e48:	00030240 	.word	0x00030240

000d4e4c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4e4c:	b508      	push	{r3, lr}
   d4e4e:	4b02      	ldr	r3, [pc, #8]	; (d4e58 <network_off+0xc>)
   d4e50:	681b      	ldr	r3, [r3, #0]
   d4e52:	699b      	ldr	r3, [r3, #24]
   d4e54:	9301      	str	r3, [sp, #4]
   d4e56:	bd08      	pop	{r3, pc}
   d4e58:	00030240 	.word	0x00030240

000d4e5c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4e5c:	b508      	push	{r3, lr}
   d4e5e:	4b02      	ldr	r3, [pc, #8]	; (d4e68 <network_listen+0xc>)
   d4e60:	681b      	ldr	r3, [r3, #0]
   d4e62:	69db      	ldr	r3, [r3, #28]
   d4e64:	9301      	str	r3, [sp, #4]
   d4e66:	bd08      	pop	{r3, pc}
   d4e68:	00030240 	.word	0x00030240

000d4e6c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4e6c:	b508      	push	{r3, lr}
   d4e6e:	4b02      	ldr	r3, [pc, #8]	; (d4e78 <network_listening+0xc>)
   d4e70:	681b      	ldr	r3, [r3, #0]
   d4e72:	6a1b      	ldr	r3, [r3, #32]
   d4e74:	9301      	str	r3, [sp, #4]
   d4e76:	bd08      	pop	{r3, pc}
   d4e78:	00030240 	.word	0x00030240

000d4e7c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4e7c:	b508      	push	{r3, lr}
   d4e7e:	4b02      	ldr	r3, [pc, #8]	; (d4e88 <network_set_listen_timeout+0xc>)
   d4e80:	681b      	ldr	r3, [r3, #0]
   d4e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e84:	9301      	str	r3, [sp, #4]
   d4e86:	bd08      	pop	{r3, pc}
   d4e88:	00030240 	.word	0x00030240

000d4e8c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4e8c:	b508      	push	{r3, lr}
   d4e8e:	4b02      	ldr	r3, [pc, #8]	; (d4e98 <network_get_listen_timeout+0xc>)
   d4e90:	681b      	ldr	r3, [r3, #0]
   d4e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4e94:	9301      	str	r3, [sp, #4]
   d4e96:	bd08      	pop	{r3, pc}
   d4e98:	00030240 	.word	0x00030240

000d4e9c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4e9c:	b508      	push	{r3, lr}
   d4e9e:	4b02      	ldr	r3, [pc, #8]	; (d4ea8 <spark_process+0xc>)
   d4ea0:	681b      	ldr	r3, [r3, #0]
   d4ea2:	689b      	ldr	r3, [r3, #8]
   d4ea4:	9301      	str	r3, [sp, #4]
   d4ea6:	bd08      	pop	{r3, pc}
   d4ea8:	00030244 	.word	0x00030244

000d4eac <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4eac:	b508      	push	{r3, lr}
   d4eae:	4b02      	ldr	r3, [pc, #8]	; (d4eb8 <spark_cloud_flag_connected+0xc>)
   d4eb0:	681b      	ldr	r3, [r3, #0]
   d4eb2:	695b      	ldr	r3, [r3, #20]
   d4eb4:	9301      	str	r3, [sp, #4]
   d4eb6:	bd08      	pop	{r3, pc}
   d4eb8:	00030244 	.word	0x00030244

000d4ebc <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4ebc:	b508      	push	{r3, lr}
   d4ebe:	4b02      	ldr	r3, [pc, #8]	; (d4ec8 <spark_sync_time_pending+0xc>)
   d4ec0:	681b      	ldr	r3, [r3, #0]
   d4ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ec4:	9301      	str	r3, [sp, #4]
   d4ec6:	bd08      	pop	{r3, pc}
   d4ec8:	00030244 	.word	0x00030244

000d4ecc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4ecc:	b508      	push	{r3, lr}
   d4ece:	4b02      	ldr	r3, [pc, #8]	; (d4ed8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4ed0:	681b      	ldr	r3, [r3, #0]
   d4ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4ed4:	9301      	str	r3, [sp, #4]
   d4ed6:	bd08      	pop	{r3, pc}
   d4ed8:	00030244 	.word	0x00030244

000d4edc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4edc:	b508      	push	{r3, lr}
   d4ede:	4b02      	ldr	r3, [pc, #8]	; (d4ee8 <malloc+0xc>)
   d4ee0:	681b      	ldr	r3, [r3, #0]
   d4ee2:	681b      	ldr	r3, [r3, #0]
   d4ee4:	9301      	str	r3, [sp, #4]
   d4ee6:	bd08      	pop	{r3, pc}
   d4ee8:	0003021c 	.word	0x0003021c

000d4eec <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4eec:	b508      	push	{r3, lr}
   d4eee:	4b02      	ldr	r3, [pc, #8]	; (d4ef8 <free+0xc>)
   d4ef0:	681b      	ldr	r3, [r3, #0]
   d4ef2:	685b      	ldr	r3, [r3, #4]
   d4ef4:	9301      	str	r3, [sp, #4]
   d4ef6:	bd08      	pop	{r3, pc}
   d4ef8:	0003021c 	.word	0x0003021c

000d4efc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4efc:	b508      	push	{r3, lr}
   d4efe:	4b02      	ldr	r3, [pc, #8]	; (d4f08 <realloc+0xc>)
   d4f00:	681b      	ldr	r3, [r3, #0]
   d4f02:	689b      	ldr	r3, [r3, #8]
   d4f04:	9301      	str	r3, [sp, #4]
   d4f06:	bd08      	pop	{r3, pc}
   d4f08:	0003021c 	.word	0x0003021c

000d4f0c <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4f0c:	b508      	push	{r3, lr}
   d4f0e:	4b02      	ldr	r3, [pc, #8]	; (d4f18 <__errno+0xc>)
   d4f10:	681b      	ldr	r3, [r3, #0]
   d4f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4f14:	9301      	str	r3, [sp, #4]
   d4f16:	bd08      	pop	{r3, pc}
   d4f18:	0003021c 	.word	0x0003021c

000d4f1c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4f1c:	2200      	movs	r2, #0
   d4f1e:	4611      	mov	r1, r2
   d4f20:	6840      	ldr	r0, [r0, #4]
   d4f22:	f7ff bfa3 	b.w	d4e6c <network_listening>

000d4f26 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4f26:	2200      	movs	r2, #0
   d4f28:	4611      	mov	r1, r2
   d4f2a:	6840      	ldr	r0, [r0, #4]
   d4f2c:	f7ff bfae 	b.w	d4e8c <network_get_listen_timeout>

000d4f30 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4f30:	2200      	movs	r2, #0
   d4f32:	6840      	ldr	r0, [r0, #4]
   d4f34:	f7ff bfa2 	b.w	d4e7c <network_set_listen_timeout>

000d4f38 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4f38:	2200      	movs	r2, #0
   d4f3a:	f081 0101 	eor.w	r1, r1, #1
   d4f3e:	6840      	ldr	r0, [r0, #4]
   d4f40:	f7ff bf8c 	b.w	d4e5c <network_listen>

000d4f44 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4f44:	2300      	movs	r3, #0
   d4f46:	461a      	mov	r2, r3
   d4f48:	4619      	mov	r1, r3
   d4f4a:	6840      	ldr	r0, [r0, #4]
   d4f4c:	f7ff bf7e 	b.w	d4e4c <network_off>

000d4f50 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4f50:	2300      	movs	r3, #0
   d4f52:	461a      	mov	r2, r3
   d4f54:	4619      	mov	r1, r3
   d4f56:	6840      	ldr	r0, [r0, #4]
   d4f58:	f7ff bf70 	b.w	d4e3c <network_on>

000d4f5c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4f5c:	2200      	movs	r2, #0
   d4f5e:	4611      	mov	r1, r2
   d4f60:	6840      	ldr	r0, [r0, #4]
   d4f62:	f7ff bf63 	b.w	d4e2c <network_ready>

000d4f66 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4f66:	2200      	movs	r2, #0
   d4f68:	4611      	mov	r1, r2
   d4f6a:	6840      	ldr	r0, [r0, #4]
   d4f6c:	f7ff bf4e 	b.w	d4e0c <network_connecting>

000d4f70 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f70:	2200      	movs	r2, #0
   d4f72:	2102      	movs	r1, #2
   d4f74:	6840      	ldr	r0, [r0, #4]
   d4f76:	f7ff bf51 	b.w	d4e1c <network_disconnect>

000d4f7a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4f7a:	2300      	movs	r3, #0
   d4f7c:	461a      	mov	r2, r3
   d4f7e:	6840      	ldr	r0, [r0, #4]
   d4f80:	f7ff bf3c 	b.w	d4dfc <network_connect>

000d4f84 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4f84:	4b02      	ldr	r3, [pc, #8]	; (d4f90 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4f86:	2203      	movs	r2, #3
   d4f88:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4f8a:	4a02      	ldr	r2, [pc, #8]	; (d4f94 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4f8c:	601a      	str	r2, [r3, #0]
   d4f8e:	4770      	bx	lr
   d4f90:	2003e3cc 	.word	0x2003e3cc
   d4f94:	000d65e4 	.word	0x000d65e4

000d4f98 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4f98:	4770      	bx	lr

000d4f9a <_ZN8SPIClassD0Ev>:
   d4f9a:	b510      	push	{r4, lr}
   d4f9c:	2110      	movs	r1, #16
   d4f9e:	4604      	mov	r4, r0
   d4fa0:	f001 f91b 	bl	d61da <_ZdlPvj>
   d4fa4:	4620      	mov	r0, r4
   d4fa6:	bd10      	pop	{r4, pc}

000d4fa8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4fa8:	b570      	push	{r4, r5, r6, lr}
   d4faa:	4b08      	ldr	r3, [pc, #32]	; (d4fcc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4fac:	6003      	str	r3, [r0, #0]
   d4fae:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4fb0:	2500      	movs	r5, #0
   d4fb2:	460e      	mov	r6, r1
   d4fb4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4fb8:	f7ff fdc4 	bl	d4b44 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4fbc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4fbe:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4fc0:	f7ff fd70 	bl	d4aa4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4fc4:	60a5      	str	r5, [r4, #8]
}
   d4fc6:	4620      	mov	r0, r4
   d4fc8:	bd70      	pop	{r4, r5, r6, pc}
   d4fca:	bf00      	nop
   d4fcc:	000d6618 	.word	0x000d6618

000d4fd0 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d4fd0:	7900      	ldrb	r0, [r0, #4]
   d4fd2:	f7ff bd6f 	b.w	d4ab4 <HAL_SPI_Is_Enabled>
	...

000d4fd8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4fd8:	4b04      	ldr	r3, [pc, #16]	; (d4fec <_GLOBAL__sub_I_System+0x14>)
   d4fda:	2000      	movs	r0, #0
   d4fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4fe0:	7018      	strb	r0, [r3, #0]
   d4fe2:	8058      	strh	r0, [r3, #2]
   d4fe4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4fe6:	f7ff bee5 	b.w	d4db4 <set_system_mode>
   d4fea:	bf00      	nop
   d4fec:	2003e3d4 	.word	0x2003e3d4

000d4ff0 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d4ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d4ff4:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   d4ff6:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d4ff8:	4615      	mov	r5, r2
   d4ffa:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   d4ffc:	bf34      	ite	cc
   d4ffe:	4615      	movcc	r5, r2
   d5000:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d5002:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   d5004:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d5006:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d5008:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   d500c:	d107      	bne.n	d501e <ltoa+0x2e>
   d500e:	4298      	cmp	r0, r3
   d5010:	da05      	bge.n	d501e <ltoa+0x2e>
      {
            *head++ = '-';
   d5012:	232d      	movs	r3, #45	; 0x2d
   d5014:	f101 0801 	add.w	r8, r1, #1
   d5018:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   d501a:	4240      	negs	r0, r0
   d501c:	e001      	b.n	d5022 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   d501e:	b1b0      	cbz	r0, d504e <ltoa+0x5e>
   d5020:	46a0      	mov	r8, r4
   d5022:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   d5026:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d5028:	462a      	mov	r2, r5
   d502a:	4601      	mov	r1, r0
   d502c:	a801      	add	r0, sp, #4
   d502e:	f001 fa2d 	bl	d648c <ldiv>
   d5032:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d5034:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   d5036:	2b09      	cmp	r3, #9
   d5038:	bfcc      	ite	gt
   d503a:	2237      	movgt	r2, #55	; 0x37
   d503c:	2230      	movle	r2, #48	; 0x30
   d503e:	fa52 f383 	uxtab	r3, r2, r3
   d5042:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d5046:	3701      	adds	r7, #1
   d5048:	2800      	cmp	r0, #0
   d504a:	d1ed      	bne.n	d5028 <ltoa+0x38>
   d504c:	e006      	b.n	d505c <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   d504e:	2330      	movs	r3, #48	; 0x30
   d5050:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d5054:	46a0      	mov	r8, r4
   d5056:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   d505a:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d505c:	463a      	mov	r2, r7
   d505e:	1c71      	adds	r1, r6, #1
   d5060:	4640      	mov	r0, r8
   d5062:	f001 fa27 	bl	d64b4 <memcpy>
      return str;
}
   d5066:	4620      	mov	r0, r4
   d5068:	b00c      	add	sp, #48	; 0x30
   d506a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d506e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d506e:	b510      	push	{r4, lr}
   d5070:	4604      	mov	r4, r0
{
	free(buffer);
   d5072:	6800      	ldr	r0, [r0, #0]
   d5074:	f7ff ff3a 	bl	d4eec <free>
}
   d5078:	4620      	mov	r0, r4
   d507a:	bd10      	pop	{r4, pc}

000d507c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d507c:	b510      	push	{r4, lr}
   d507e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5080:	6800      	ldr	r0, [r0, #0]
   d5082:	b108      	cbz	r0, d5088 <_ZN6String10invalidateEv+0xc>
   d5084:	f7ff ff32 	bl	d4eec <free>
	buffer = NULL;
   d5088:	2300      	movs	r3, #0
   d508a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d508c:	60a3      	str	r3, [r4, #8]
   d508e:	6063      	str	r3, [r4, #4]
   d5090:	bd10      	pop	{r4, pc}

000d5092 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5092:	b538      	push	{r3, r4, r5, lr}
   d5094:	4604      	mov	r4, r0
   d5096:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5098:	6800      	ldr	r0, [r0, #0]
   d509a:	3101      	adds	r1, #1
   d509c:	f7ff ff2e 	bl	d4efc <realloc>
	if (newbuffer) {
   d50a0:	b110      	cbz	r0, d50a8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d50a2:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d50a6:	2001      	movs	r0, #1
	}
	return 0;
}
   d50a8:	bd38      	pop	{r3, r4, r5, pc}

000d50aa <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d50aa:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d50ac:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d50ae:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d50b0:	b113      	cbz	r3, d50b8 <_ZN6String7reserveEj+0xe>
   d50b2:	6843      	ldr	r3, [r0, #4]
   d50b4:	428b      	cmp	r3, r1
   d50b6:	d207      	bcs.n	d50c8 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d50b8:	4620      	mov	r0, r4
   d50ba:	f7ff ffea 	bl	d5092 <_ZN6String12changeBufferEj>
   d50be:	b120      	cbz	r0, d50ca <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d50c0:	68a3      	ldr	r3, [r4, #8]
   d50c2:	b90b      	cbnz	r3, d50c8 <_ZN6String7reserveEj+0x1e>
   d50c4:	6822      	ldr	r2, [r4, #0]
   d50c6:	7013      	strb	r3, [r2, #0]
   d50c8:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d50ca:	bd10      	pop	{r4, pc}

000d50cc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d50cc:	b570      	push	{r4, r5, r6, lr}
   d50ce:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d50d0:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d50d2:	4604      	mov	r4, r0
   d50d4:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d50d6:	f7ff ffe8 	bl	d50aa <_ZN6String7reserveEj>
   d50da:	b918      	cbnz	r0, d50e4 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d50dc:	4620      	mov	r0, r4
   d50de:	f7ff ffcd 	bl	d507c <_ZN6String10invalidateEv>
		return *this;
   d50e2:	e009      	b.n	d50f8 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d50e4:	462a      	mov	r2, r5
   d50e6:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d50e8:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d50ea:	6820      	ldr	r0, [r4, #0]
   d50ec:	f001 f9e2 	bl	d64b4 <memcpy>
	buffer[len] = 0;
   d50f0:	6822      	ldr	r2, [r4, #0]
   d50f2:	68a3      	ldr	r3, [r4, #8]
   d50f4:	2100      	movs	r1, #0
   d50f6:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d50f8:	4620      	mov	r0, r4
   d50fa:	bd70      	pop	{r4, r5, r6, pc}

000d50fc <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d50fc:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d50fe:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5100:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5102:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5104:	6043      	str	r3, [r0, #4]
	len = 0;
   d5106:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5108:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d510a:	460d      	mov	r5, r1
   d510c:	b139      	cbz	r1, d511e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d510e:	4608      	mov	r0, r1
   d5110:	f001 fa1e 	bl	d6550 <strlen>
   d5114:	4629      	mov	r1, r5
   d5116:	4602      	mov	r2, r0
   d5118:	4620      	mov	r0, r4
   d511a:	f7ff ffd7 	bl	d50cc <_ZN6String4copyEPKcj>
}
   d511e:	4620      	mov	r0, r4
   d5120:	bd38      	pop	{r3, r4, r5, pc}

000d5122 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5122:	b538      	push	{r3, r4, r5, lr}
   d5124:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5126:	460c      	mov	r4, r1
   d5128:	b141      	cbz	r1, d513c <_ZN6StringaSEPKc+0x1a>
   d512a:	4608      	mov	r0, r1
   d512c:	f001 fa10 	bl	d6550 <strlen>
   d5130:	4621      	mov	r1, r4
   d5132:	4602      	mov	r2, r0
   d5134:	4628      	mov	r0, r5
   d5136:	f7ff ffc9 	bl	d50cc <_ZN6String4copyEPKcj>
   d513a:	e001      	b.n	d5140 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d513c:	f7ff ff9e 	bl	d507c <_ZN6String10invalidateEv>

	return *this;
}
   d5140:	4628      	mov	r0, r5
   d5142:	bd38      	pop	{r3, r4, r5, pc}

000d5144 <_ZN6StringC1Elh>:
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d5144:	b510      	push	{r4, lr}
   d5146:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5148:	2300      	movs	r3, #0
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d514a:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d514c:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d514e:	6063      	str	r3, [r4, #4]
	len = 0;
   d5150:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5152:	7323      	strb	r3, [r4, #12]
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d5154:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	ltoa(value, buf, base);
   d5156:	a901      	add	r1, sp, #4
   d5158:	f7ff ff4a 	bl	d4ff0 <ltoa>
	*this = buf;
   d515c:	a901      	add	r1, sp, #4
   d515e:	4620      	mov	r0, r4
   d5160:	f7ff ffdf 	bl	d5122 <_ZN6StringaSEPKc>
}
   d5164:	4620      	mov	r0, r4
   d5166:	b00a      	add	sp, #40	; 0x28
   d5168:	bd10      	pop	{r4, pc}

000d516a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d516a:	b570      	push	{r4, r5, r6, lr}
   d516c:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d516e:	460e      	mov	r6, r1
   d5170:	b909      	cbnz	r1, d5176 <_ZN6String6concatEPKcj+0xc>
   d5172:	2000      	movs	r0, #0
   d5174:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5176:	b16a      	cbz	r2, d5194 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d5178:	6883      	ldr	r3, [r0, #8]
   d517a:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d517c:	4629      	mov	r1, r5
   d517e:	f7ff ff94 	bl	d50aa <_ZN6String7reserveEj>
   d5182:	2800      	cmp	r0, #0
   d5184:	d0f5      	beq.n	d5172 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5186:	6820      	ldr	r0, [r4, #0]
   d5188:	68a3      	ldr	r3, [r4, #8]
   d518a:	4631      	mov	r1, r6
   d518c:	4418      	add	r0, r3
   d518e:	f001 f9d7 	bl	d6540 <strcpy>
	len = newlen;
   d5192:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d5194:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5196:	bd70      	pop	{r4, r5, r6, pc}

000d5198 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d5198:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d519a:	688a      	ldr	r2, [r1, #8]
   d519c:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d519e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d51a0:	f7ff ffe3 	bl	d516a <_ZN6String6concatEPKcj>
   d51a4:	b910      	cbnz	r0, d51ac <_ZplRK15StringSumHelperRK6String+0x14>
   d51a6:	4620      	mov	r0, r4
   d51a8:	f7ff ff68 	bl	d507c <_ZN6String10invalidateEv>
	return a;
}
   d51ac:	4620      	mov	r0, r4
   d51ae:	bd10      	pop	{r4, pc}

000d51b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d51b0:	4802      	ldr	r0, [pc, #8]	; (d51bc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d51b2:	2300      	movs	r3, #0
   d51b4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d51b6:	f7ff bccd 	b.w	d4b54 <os_mutex_recursive_create>
   d51ba:	bf00      	nop
   d51bc:	2003e3dc 	.word	0x2003e3dc

000d51c0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d51c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d51c2:	4606      	mov	r6, r0
   d51c4:	460d      	mov	r5, r1
   d51c6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d51c8:	2400      	movs	r4, #0
  while (size--) {
   d51ca:	42bd      	cmp	r5, r7
   d51cc:	d00c      	beq.n	d51e8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d51ce:	6833      	ldr	r3, [r6, #0]
   d51d0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d51d4:	689b      	ldr	r3, [r3, #8]
   d51d6:	4630      	mov	r0, r6
   d51d8:	4798      	blx	r3
     if (chunk>=0)
   d51da:	2800      	cmp	r0, #0
   d51dc:	db01      	blt.n	d51e2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d51de:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d51e0:	e7f3      	b.n	d51ca <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d51e2:	2c00      	cmp	r4, #0
   d51e4:	bf08      	it	eq
   d51e6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d51e8:	4620      	mov	r0, r4
   d51ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d51ec <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d51ec:	b570      	push	{r4, r5, r6, lr}
   d51ee:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d51f0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d51f2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d51f4:	b149      	cbz	r1, d520a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d51f6:	f001 f9ab 	bl	d6550 <strlen>
   d51fa:	682b      	ldr	r3, [r5, #0]
   d51fc:	4602      	mov	r2, r0
   d51fe:	4621      	mov	r1, r4
   d5200:	4628      	mov	r0, r5
   d5202:	68db      	ldr	r3, [r3, #12]
    }
   d5204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5208:	4718      	bx	r3
    }
   d520a:	bd70      	pop	{r4, r5, r6, pc}

000d520c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d520c:	6803      	ldr	r3, [r0, #0]
   d520e:	689b      	ldr	r3, [r3, #8]
   d5210:	4718      	bx	r3

000d5212 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5212:	b530      	push	{r4, r5, lr}
   d5214:	b08b      	sub	sp, #44	; 0x2c
   d5216:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5218:	2100      	movs	r1, #0
   d521a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d521e:	2a01      	cmp	r2, #1
   d5220:	bf98      	it	ls
   d5222:	220a      	movls	r2, #10
   d5224:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5228:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d522c:	fb05 3312 	mls	r3, r5, r2, r3
   d5230:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5234:	2b09      	cmp	r3, #9
   d5236:	bf94      	ite	ls
   d5238:	3330      	addls	r3, #48	; 0x30
   d523a:	3337      	addhi	r3, #55	; 0x37
   d523c:	b2db      	uxtb	r3, r3
   d523e:	4621      	mov	r1, r4
   d5240:	f804 3901 	strb.w	r3, [r4], #-1
   d5244:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5246:	2d00      	cmp	r5, #0
   d5248:	d1ee      	bne.n	d5228 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d524a:	f7ff ffcf 	bl	d51ec <_ZN5Print5writeEPKc>
}
   d524e:	b00b      	add	sp, #44	; 0x2c
   d5250:	bd30      	pop	{r4, r5, pc}

000d5252 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5252:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5254:	b92a      	cbnz	r2, d5262 <_ZN5Print5printEmi+0x10>
   d5256:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5258:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d525c:	689b      	ldr	r3, [r3, #8]
   d525e:	b2c9      	uxtb	r1, r1
   d5260:	4718      	bx	r3
  else return printNumber(n, base);
   d5262:	b2d2      	uxtb	r2, r2
}
   d5264:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5268:	f7ff bfd3 	b.w	d5212 <_ZN5Print11printNumberEmh>

000d526c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d526c:	f7ff bff1 	b.w	d5252 <_ZN5Print5printEmi>

000d5270 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5270:	4b01      	ldr	r3, [pc, #4]	; (d5278 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5272:	4a02      	ldr	r2, [pc, #8]	; (d527c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5274:	601a      	str	r2, [r3, #0]
   d5276:	4770      	bx	lr
   d5278:	2003e3e0 	.word	0x2003e3e0
   d527c:	000d66d5 	.word	0x000d66d5

000d5280 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d5280:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d5282:	2000      	movs	r0, #0
   d5284:	f7ff fe1a 	bl	d4ebc <spark_sync_time_pending>
   d5288:	b128      	cbz	r0, d5296 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d528a:	f7ff fe0f 	bl	d4eac <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d528e:	f080 0001 	eor.w	r0, r0, #1
   d5292:	b2c0      	uxtb	r0, r0
   d5294:	bd08      	pop	{r3, pc}
   d5296:	2001      	movs	r0, #1
    }
   d5298:	bd08      	pop	{r3, pc}

000d529a <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d529a:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d529c:	2000      	movs	r0, #0
   d529e:	f7ff fc31 	bl	d4b04 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d52a2:	4604      	mov	r4, r0
   d52a4:	b968      	cbnz	r0, d52c2 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d52a6:	f7ff fd7d 	bl	d4da4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d52aa:	2801      	cmp	r0, #1
   d52ac:	d10b      	bne.n	d52c6 <_ZN9TimeClass7isValidEv+0x2c>
   d52ae:	4620      	mov	r0, r4
   d52b0:	f7ff fd88 	bl	d4dc4 <system_thread_get_state>
   d52b4:	b938      	cbnz	r0, d52c6 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d52b6:	f7ff ffe3 	bl	d5280 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d52ba:	b930      	cbnz	r0, d52ca <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d52bc:	f7ff fdee 	bl	d4e9c <spark_process>
   d52c0:	e7f9      	b.n	d52b6 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d52c2:	2001      	movs	r0, #1
   d52c4:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d52c6:	2000      	movs	r0, #0
   d52c8:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d52ca:	f7ff ffd9 	bl	d5280 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d52ce:	2000      	movs	r0, #0
   d52d0:	f7ff fc18 	bl	d4b04 <HAL_RTC_Time_Is_Valid>
   d52d4:	3000      	adds	r0, #0
   d52d6:	bf18      	it	ne
   d52d8:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d52da:	bd10      	pop	{r4, pc}

000d52dc <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d52dc:	b508      	push	{r3, lr}
    (void)isValid();
   d52de:	f7ff ffdc 	bl	d529a <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d52e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d52e6:	f7ff bc05 	b.w	d4af4 <HAL_RTC_Get_UnixTime>
	...

000d52ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d52ec:	4b02      	ldr	r3, [pc, #8]	; (d52f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d52ee:	681a      	ldr	r2, [r3, #0]
   d52f0:	4b02      	ldr	r3, [pc, #8]	; (d52fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d52f2:	601a      	str	r2, [r3, #0]
   d52f4:	4770      	bx	lr
   d52f6:	bf00      	nop
   d52f8:	2003e308 	.word	0x2003e308
   d52fc:	2003e3e4 	.word	0x2003e3e4

000d5300 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5300:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5302:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5304:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5306:	b113      	cbz	r3, d530e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5308:	2203      	movs	r2, #3
   d530a:	4601      	mov	r1, r0
   d530c:	4798      	blx	r3
    }
   d530e:	4620      	mov	r0, r4
   d5310:	bd10      	pop	{r4, pc}

000d5312 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5312:	b510      	push	{r4, lr}
   d5314:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5316:	f7ff fff3 	bl	d5300 <_ZNSt14_Function_baseD1Ev>
   d531a:	4620      	mov	r0, r4
   d531c:	bd10      	pop	{r4, pc}

000d531e <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d531e:	b510      	push	{r4, lr}
   d5320:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d5322:	f7ff fd27 	bl	d4d74 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d5326:	4284      	cmp	r4, r0
   d5328:	d008      	beq.n	d533c <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d532a:	b11c      	cbz	r4, d5334 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d532c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d5330:	f7ff bd10 	b.w	d4d54 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d5334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d5338:	f7ff bd14 	b.w	d4d64 <LED_Signaling_Stop>
   d533c:	bd10      	pop	{r4, pc}

000d533e <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d533e:	b570      	push	{r4, r5, r6, lr}
   d5340:	4605      	mov	r5, r0
   d5342:	460e      	mov	r6, r1
   d5344:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d5346:	f7ff fd15 	bl	d4d74 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d534a:	b150      	cbz	r0, d5362 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d534c:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d5350:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d5354:	f7ff fcf6 	bl	d4d44 <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d5358:	20e7      	movs	r0, #231	; 0xe7
}
   d535a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d535e:	f7ff bd11 	b.w	d4d84 <LED_On>
   d5362:	bd70      	pop	{r4, r5, r6, pc}

000d5364 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5364:	4803      	ldr	r0, [pc, #12]	; (d5374 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5366:	4a04      	ldr	r2, [pc, #16]	; (d5378 <_GLOBAL__sub_I_RGB+0x14>)
   d5368:	4904      	ldr	r1, [pc, #16]	; (d537c <_GLOBAL__sub_I_RGB+0x18>)
   d536a:	2300      	movs	r3, #0
   d536c:	6083      	str	r3, [r0, #8]
   d536e:	f000 bf2f 	b.w	d61d0 <__aeabi_atexit>
   d5372:	bf00      	nop
   d5374:	2003e3e8 	.word	0x2003e3e8
   d5378:	2003e370 	.word	0x2003e370
   d537c:	000d5313 	.word	0x000d5313

000d5380 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5380:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5382:	4b0c      	ldr	r3, [pc, #48]	; (d53b4 <serialEventRun+0x34>)
   d5384:	b133      	cbz	r3, d5394 <serialEventRun+0x14>
   d5386:	f000 f955 	bl	d5634 <_Z16_fetch_usbserialv>
   d538a:	6803      	ldr	r3, [r0, #0]
   d538c:	691b      	ldr	r3, [r3, #16]
   d538e:	4798      	blx	r3
   d5390:	2800      	cmp	r0, #0
   d5392:	dc09      	bgt.n	d53a8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5394:	4b08      	ldr	r3, [pc, #32]	; (d53b8 <serialEventRun+0x38>)
   d5396:	b163      	cbz	r3, d53b2 <serialEventRun+0x32>
   d5398:	f000 f9ce 	bl	d5738 <_Z22__fetch_global_Serial1v>
   d539c:	6803      	ldr	r3, [r0, #0]
   d539e:	691b      	ldr	r3, [r3, #16]
   d53a0:	4798      	blx	r3
   d53a2:	2800      	cmp	r0, #0
   d53a4:	dc03      	bgt.n	d53ae <serialEventRun+0x2e>
   d53a6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d53a8:	f3af 8000 	nop.w
   d53ac:	e7f2      	b.n	d5394 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d53ae:	f3af 8000 	nop.w
   d53b2:	bd08      	pop	{r3, pc}
	...

000d53bc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d53bc:	b508      	push	{r3, lr}
	serialEventRun();
   d53be:	f7ff ffdf 	bl	d5380 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d53c2:	f7ff fb8f 	bl	d4ae4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d53c6:	4b01      	ldr	r3, [pc, #4]	; (d53cc <_post_loop+0x10>)
   d53c8:	6018      	str	r0, [r3, #0]
   d53ca:	bd08      	pop	{r3, pc}
   d53cc:	2003e734 	.word	0x2003e734

000d53d0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d53d0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d53d2:	2300      	movs	r3, #0
   d53d4:	9300      	str	r3, [sp, #0]
   d53d6:	461a      	mov	r2, r3
   d53d8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d53dc:	f7ff fd04 	bl	d4de8 <system_ctrl_set_result>
}
   d53e0:	b003      	add	sp, #12
   d53e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d53e8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d53e8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d53ea:	8843      	ldrh	r3, [r0, #2]
   d53ec:	2b0a      	cmp	r3, #10
   d53ee:	d008      	beq.n	d5402 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d53f0:	2b50      	cmp	r3, #80	; 0x50
   d53f2:	d109      	bne.n	d5408 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d53f4:	4b09      	ldr	r3, [pc, #36]	; (d541c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d53f6:	681b      	ldr	r3, [r3, #0]
   d53f8:	b13b      	cbz	r3, d540a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d53fa:	b003      	add	sp, #12
   d53fc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5400:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5402:	f7ff ffe5 	bl	d53d0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5406:	e006      	b.n	d5416 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5408:	2300      	movs	r3, #0
   d540a:	9300      	str	r3, [sp, #0]
   d540c:	461a      	mov	r2, r3
   d540e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5412:	f7ff fce9 	bl	d4de8 <system_ctrl_set_result>
        break;
    }
}
   d5416:	b003      	add	sp, #12
   d5418:	f85d fb04 	ldr.w	pc, [sp], #4
   d541c:	2003e3f8 	.word	0x2003e3f8

000d5420 <module_user_init_hook>:

void module_user_init_hook()
{
   d5420:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5422:	f7ff fb57 	bl	d4ad4 <HAL_RNG_GetRandomNumber>
   d5426:	4604      	mov	r4, r0
    srand(seed);
   d5428:	f001 f858 	bl	d64dc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d542c:	4b07      	ldr	r3, [pc, #28]	; (d544c <module_user_init_hook+0x2c>)
   d542e:	b113      	cbz	r3, d5436 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5430:	4620      	mov	r0, r4
   d5432:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5436:	2100      	movs	r1, #0
   d5438:	4804      	ldr	r0, [pc, #16]	; (d544c <module_user_init_hook+0x2c>)
   d543a:	f7ff fd47 	bl	d4ecc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d543e:	2100      	movs	r1, #0
   d5440:	4803      	ldr	r0, [pc, #12]	; (d5450 <module_user_init_hook+0x30>)
}
   d5442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5446:	f7ff bcc5 	b.w	d4dd4 <system_ctrl_set_app_request_handler>
   d544a:	bf00      	nop
   d544c:	00000000 	.word	0x00000000
   d5450:	000d53e9 	.word	0x000d53e9

000d5454 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5454:	4770      	bx	lr

000d5456 <_ZN9IPAddressD0Ev>:
   d5456:	b510      	push	{r4, lr}
   d5458:	2118      	movs	r1, #24
   d545a:	4604      	mov	r4, r0
   d545c:	f000 febd 	bl	d61da <_ZdlPvj>
   d5460:	4620      	mov	r0, r4
   d5462:	bd10      	pop	{r4, pc}

000d5464 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5464:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5466:	7d03      	ldrb	r3, [r0, #20]
   d5468:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d546a:	b08d      	sub	sp, #52	; 0x34
   d546c:	460e      	mov	r6, r1
   d546e:	f100 0704 	add.w	r7, r0, #4
   d5472:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5476:	d002      	beq.n	d547e <_ZNK9IPAddress7printToER5Print+0x1a>
   d5478:	f100 0508 	add.w	r5, r0, #8
   d547c:	e018      	b.n	d54b0 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d547e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5480:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5482:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5486:	232f      	movs	r3, #47	; 0x2f
   d5488:	462a      	mov	r2, r5
   d548a:	200a      	movs	r0, #10
   d548c:	f7ff fb6a 	bl	d4b64 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5490:	4628      	mov	r0, r5
   d5492:	f001 f85d 	bl	d6550 <strlen>
   d5496:	6833      	ldr	r3, [r6, #0]
   d5498:	4602      	mov	r2, r0
   d549a:	68db      	ldr	r3, [r3, #12]
   d549c:	4629      	mov	r1, r5
   d549e:	4630      	mov	r0, r6
   d54a0:	4798      	blx	r3
   d54a2:	e00f      	b.n	d54c4 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d54a4:	b124      	cbz	r4, d54b0 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d54a6:	212e      	movs	r1, #46	; 0x2e
   d54a8:	4630      	mov	r0, r6
   d54aa:	f7ff feaf 	bl	d520c <_ZN5Print5printEc>
   d54ae:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d54b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d54b4:	220a      	movs	r2, #10
   d54b6:	4630      	mov	r0, r6
   d54b8:	f7ff fed8 	bl	d526c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d54bc:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d54be:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d54c0:	d1f0      	bne.n	d54a4 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d54c2:	4620      	mov	r0, r4
    }
    return n;
}
   d54c4:	b00d      	add	sp, #52	; 0x34
   d54c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d54c8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d54c8:	b510      	push	{r4, lr}
   d54ca:	4b05      	ldr	r3, [pc, #20]	; (d54e0 <_ZN9IPAddressC1Ev+0x18>)
   d54cc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d54ce:	2211      	movs	r2, #17
   d54d0:	f840 3b04 	str.w	r3, [r0], #4
   d54d4:	2100      	movs	r1, #0
   d54d6:	f000 fff8 	bl	d64ca <memset>
{
    clear();
}
   d54da:	4620      	mov	r0, r4
   d54dc:	bd10      	pop	{r4, pc}
   d54de:	bf00      	nop
   d54e0:	000d6730 	.word	0x000d6730

000d54e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d54e4:	4603      	mov	r3, r0
   d54e6:	4a07      	ldr	r2, [pc, #28]	; (d5504 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d54e8:	b510      	push	{r4, lr}
   d54ea:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d54ee:	f101 0210 	add.w	r2, r1, #16
   d54f2:	f851 4b04 	ldr.w	r4, [r1], #4
   d54f6:	f843 4b04 	str.w	r4, [r3], #4
   d54fa:	4291      	cmp	r1, r2
   d54fc:	d1f9      	bne.n	d54f2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d54fe:	780a      	ldrb	r2, [r1, #0]
   d5500:	701a      	strb	r2, [r3, #0]
}
   d5502:	bd10      	pop	{r4, pc}
   d5504:	000d6730 	.word	0x000d6730

000d5508 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d5508:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d550a:	2b04      	cmp	r3, #4
   d550c:	d101      	bne.n	d5512 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d550e:	6840      	ldr	r0, [r0, #4]
   d5510:	e008      	b.n	d5524 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d5512:	2b06      	cmp	r3, #6
   d5514:	d10a      	bne.n	d552c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d5516:	6843      	ldr	r3, [r0, #4]
   d5518:	b153      	cbz	r3, d5530 <_ZNK9IPAddresscvbEv+0x28>
   d551a:	6883      	ldr	r3, [r0, #8]
   d551c:	b143      	cbz	r3, d5530 <_ZNK9IPAddresscvbEv+0x28>
   d551e:	68c3      	ldr	r3, [r0, #12]
   d5520:	b133      	cbz	r3, d5530 <_ZNK9IPAddresscvbEv+0x28>
   d5522:	6900      	ldr	r0, [r0, #16]
   d5524:	3000      	adds	r0, #0
   d5526:	bf18      	it	ne
   d5528:	2001      	movne	r0, #1
   d552a:	4770      	bx	lr
   d552c:	2000      	movs	r0, #0
   d552e:	4770      	bx	lr
   d5530:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d5532:	4770      	bx	lr

000d5534 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5534:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5536:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d553a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d553e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5542:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5546:	2304      	movs	r3, #4
   d5548:	6041      	str	r1, [r0, #4]
   d554a:	7503      	strb	r3, [r0, #20]
   d554c:	bd10      	pop	{r4, pc}

000d554e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d554e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5550:	780d      	ldrb	r5, [r1, #0]
   d5552:	788b      	ldrb	r3, [r1, #2]
   d5554:	784a      	ldrb	r2, [r1, #1]
   d5556:	78c9      	ldrb	r1, [r1, #3]
   d5558:	9100      	str	r1, [sp, #0]
   d555a:	4629      	mov	r1, r5
   d555c:	f7ff ffea 	bl	d5534 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5560:	b003      	add	sp, #12
   d5562:	bd30      	pop	{r4, r5, pc}

000d5564 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
   d5564:	b510      	push	{r4, lr}
   d5566:	4b03      	ldr	r3, [pc, #12]	; (d5574 <_ZN9IPAddressC1EPKh+0x10>)
   d5568:	6003      	str	r3, [r0, #0]
   d556a:	4604      	mov	r4, r0
{
    *this = address;
   d556c:	f7ff ffef 	bl	d554e <_ZN9IPAddressaSEPKh>
}
   d5570:	4620      	mov	r0, r4
   d5572:	bd10      	pop	{r4, pc}
   d5574:	000d6730 	.word	0x000d6730

000d5578 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5578:	7441      	strb	r1, [r0, #17]
   d557a:	4770      	bx	lr

000d557c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d557c:	4770      	bx	lr

000d557e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d557e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5580:	2100      	movs	r1, #0
   d5582:	7c00      	ldrb	r0, [r0, #16]
   d5584:	f7ff fbc6 	bl	d4d14 <HAL_USB_USART_Receive_Data>
}
   d5588:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d558c:	bf28      	it	cs
   d558e:	f04f 30ff 	movcs.w	r0, #4294967295
   d5592:	bd08      	pop	{r3, pc}

000d5594 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5594:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5596:	2101      	movs	r1, #1
   d5598:	7c00      	ldrb	r0, [r0, #16]
   d559a:	f7ff fbbb 	bl	d4d14 <HAL_USB_USART_Receive_Data>
}
   d559e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d55a2:	bf28      	it	cs
   d55a4:	f04f 30ff 	movcs.w	r0, #4294967295
   d55a8:	bd08      	pop	{r3, pc}

000d55aa <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d55aa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d55ac:	7c00      	ldrb	r0, [r0, #16]
   d55ae:	f7ff fba9 	bl	d4d04 <HAL_USB_USART_Available_Data_For_Write>
}
   d55b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55b6:	bd08      	pop	{r3, pc}

000d55b8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d55b8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d55ba:	7c00      	ldrb	r0, [r0, #16]
   d55bc:	f7ff fb9a 	bl	d4cf4 <HAL_USB_USART_Available_Data>
}
   d55c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55c4:	bd08      	pop	{r3, pc}

000d55c6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d55c6:	7c00      	ldrb	r0, [r0, #16]
   d55c8:	f7ff bbb4 	b.w	d4d34 <HAL_USB_USART_Flush_Data>

000d55cc <_ZN9USBSerialD0Ev>:
   d55cc:	b510      	push	{r4, lr}
   d55ce:	2114      	movs	r1, #20
   d55d0:	4604      	mov	r4, r0
   d55d2:	f000 fe02 	bl	d61da <_ZdlPvj>
   d55d6:	4620      	mov	r0, r4
   d55d8:	bd10      	pop	{r4, pc}

000d55da <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d55da:	b538      	push	{r3, r4, r5, lr}
   d55dc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d55de:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d55e0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d55e2:	f7ff fb8f 	bl	d4d04 <HAL_USB_USART_Available_Data_For_Write>
   d55e6:	2800      	cmp	r0, #0
   d55e8:	dc01      	bgt.n	d55ee <_ZN9USBSerial5writeEh+0x14>
   d55ea:	7c60      	ldrb	r0, [r4, #17]
   d55ec:	b128      	cbz	r0, d55fa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d55ee:	4629      	mov	r1, r5
   d55f0:	7c20      	ldrb	r0, [r4, #16]
   d55f2:	f7ff fb97 	bl	d4d24 <HAL_USB_USART_Send_Data>
   d55f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d55fa:	bd38      	pop	{r3, r4, r5, pc}

000d55fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d55fc:	b510      	push	{r4, lr}
   d55fe:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5600:	2300      	movs	r3, #0
   d5602:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5608:	60a3      	str	r3, [r4, #8]
   d560a:	4b05      	ldr	r3, [pc, #20]	; (d5620 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d560c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d560e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5610:	4608      	mov	r0, r1
{
  _serial = serial;
   d5612:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5614:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5616:	4611      	mov	r1, r2
   d5618:	f7ff fb64 	bl	d4ce4 <HAL_USB_USART_Init>
}
   d561c:	4620      	mov	r0, r4
   d561e:	bd10      	pop	{r4, pc}
   d5620:	000d6744 	.word	0x000d6744

000d5624 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5624:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5626:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5628:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d562a:	2100      	movs	r1, #0
   d562c:	f000 ff4d 	bl	d64ca <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5630:	4620      	mov	r0, r4
   d5632:	bd10      	pop	{r4, pc}

000d5634 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5634:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5636:	4d0e      	ldr	r5, [pc, #56]	; (d5670 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5638:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d563a:	a801      	add	r0, sp, #4
   d563c:	f7ff fff2 	bl	d5624 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5640:	6829      	ldr	r1, [r5, #0]
   d5642:	f011 0401 	ands.w	r4, r1, #1
   d5646:	d110      	bne.n	d566a <_Z16_fetch_usbserialv+0x36>
   d5648:	4628      	mov	r0, r5
   d564a:	f7fe fd2c 	bl	d40a6 <__cxa_guard_acquire>
   d564e:	b160      	cbz	r0, d566a <_Z16_fetch_usbserialv+0x36>
   d5650:	aa01      	add	r2, sp, #4
   d5652:	4621      	mov	r1, r4
   d5654:	4807      	ldr	r0, [pc, #28]	; (d5674 <_Z16_fetch_usbserialv+0x40>)
   d5656:	f7ff ffd1 	bl	d55fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d565a:	4628      	mov	r0, r5
   d565c:	f7fe fd28 	bl	d40b0 <__cxa_guard_release>
   d5660:	4a05      	ldr	r2, [pc, #20]	; (d5678 <_Z16_fetch_usbserialv+0x44>)
   d5662:	4906      	ldr	r1, [pc, #24]	; (d567c <_Z16_fetch_usbserialv+0x48>)
   d5664:	4803      	ldr	r0, [pc, #12]	; (d5674 <_Z16_fetch_usbserialv+0x40>)
   d5666:	f000 fdb3 	bl	d61d0 <__aeabi_atexit>
	return _usbserial;
}
   d566a:	4802      	ldr	r0, [pc, #8]	; (d5674 <_Z16_fetch_usbserialv+0x40>)
   d566c:	b007      	add	sp, #28
   d566e:	bd30      	pop	{r4, r5, pc}
   d5670:	2003e3fc 	.word	0x2003e3fc
   d5674:	2003e400 	.word	0x2003e400
   d5678:	2003e370 	.word	0x2003e370
   d567c:	000d557d 	.word	0x000d557d

000d5680 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5680:	4770      	bx	lr

000d5682 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5682:	7441      	strb	r1, [r0, #17]
   d5684:	4770      	bx	lr

000d5686 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5686:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5688:	7c00      	ldrb	r0, [r0, #16]
   d568a:	f7ff fabb 	bl	d4c04 <HAL_USART_Available_Data_For_Write>
}
   d568e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5692:	bd08      	pop	{r3, pc}

000d5694 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5694:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5696:	7c00      	ldrb	r0, [r0, #16]
   d5698:	f7ff fa8c 	bl	d4bb4 <HAL_USART_Available_Data>
}
   d569c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56a0:	bd08      	pop	{r3, pc}

000d56a2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d56a2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d56a4:	7c00      	ldrb	r0, [r0, #16]
   d56a6:	f7ff fa95 	bl	d4bd4 <HAL_USART_Peek_Data>
}
   d56aa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d56ae:	bf28      	it	cs
   d56b0:	f04f 30ff 	movcs.w	r0, #4294967295
   d56b4:	bd08      	pop	{r3, pc}

000d56b6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d56b6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d56b8:	7c00      	ldrb	r0, [r0, #16]
   d56ba:	f7ff fa83 	bl	d4bc4 <HAL_USART_Read_Data>
}
   d56be:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d56c2:	bf28      	it	cs
   d56c4:	f04f 30ff 	movcs.w	r0, #4294967295
   d56c8:	bd08      	pop	{r3, pc}

000d56ca <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d56ca:	7c00      	ldrb	r0, [r0, #16]
   d56cc:	f7ff ba8a 	b.w	d4be4 <HAL_USART_Flush_Data>

000d56d0 <_ZN11USARTSerialD0Ev>:
   d56d0:	b510      	push	{r4, lr}
   d56d2:	2114      	movs	r1, #20
   d56d4:	4604      	mov	r4, r0
   d56d6:	f000 fd80 	bl	d61da <_ZdlPvj>
   d56da:	4620      	mov	r0, r4
   d56dc:	bd10      	pop	{r4, pc}

000d56de <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d56de:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d56e0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d56e2:	4604      	mov	r4, r0
   d56e4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d56e6:	b925      	cbnz	r5, d56f2 <_ZN11USARTSerial5writeEh+0x14>
   d56e8:	7c00      	ldrb	r0, [r0, #16]
   d56ea:	f7ff fa8b 	bl	d4c04 <HAL_USART_Available_Data_For_Write>
   d56ee:	2800      	cmp	r0, #0
   d56f0:	dd05      	ble.n	d56fe <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d56f2:	4631      	mov	r1, r6
   d56f4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d56f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d56fa:	f7ff ba53 	b.w	d4ba4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d56fe:	4628      	mov	r0, r5
   d5700:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5704 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5704:	b510      	push	{r4, lr}
   d5706:	4604      	mov	r4, r0
   d5708:	4608      	mov	r0, r1
   d570a:	4611      	mov	r1, r2
   d570c:	2200      	movs	r2, #0
   d570e:	6062      	str	r2, [r4, #4]
   d5710:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5714:	60a2      	str	r2, [r4, #8]
   d5716:	4a05      	ldr	r2, [pc, #20]	; (d572c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5718:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d571a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d571c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d571e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5720:	461a      	mov	r2, r3
   d5722:	f7ff fa37 	bl	d4b94 <HAL_USART_Init>
}
   d5726:	4620      	mov	r0, r4
   d5728:	bd10      	pop	{r4, pc}
   d572a:	bf00      	nop
   d572c:	000d6774 	.word	0x000d6774

000d5730 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5730:	7c00      	ldrb	r0, [r0, #16]
   d5732:	f7ff ba5f 	b.w	d4bf4 <HAL_USART_Is_Enabled>
	...

000d5738 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5738:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d573a:	4d0c      	ldr	r5, [pc, #48]	; (d576c <_Z22__fetch_global_Serial1v+0x34>)
   d573c:	6829      	ldr	r1, [r5, #0]
   d573e:	f011 0401 	ands.w	r4, r1, #1
   d5742:	d111      	bne.n	d5768 <_Z22__fetch_global_Serial1v+0x30>
   d5744:	4628      	mov	r0, r5
   d5746:	f7fe fcae 	bl	d40a6 <__cxa_guard_acquire>
   d574a:	b168      	cbz	r0, d5768 <_Z22__fetch_global_Serial1v+0x30>
   d574c:	4a08      	ldr	r2, [pc, #32]	; (d5770 <_Z22__fetch_global_Serial1v+0x38>)
   d574e:	4b09      	ldr	r3, [pc, #36]	; (d5774 <_Z22__fetch_global_Serial1v+0x3c>)
   d5750:	4809      	ldr	r0, [pc, #36]	; (d5778 <_Z22__fetch_global_Serial1v+0x40>)
   d5752:	4621      	mov	r1, r4
   d5754:	f7ff ffd6 	bl	d5704 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5758:	4628      	mov	r0, r5
   d575a:	f7fe fca9 	bl	d40b0 <__cxa_guard_release>
   d575e:	4a07      	ldr	r2, [pc, #28]	; (d577c <_Z22__fetch_global_Serial1v+0x44>)
   d5760:	4907      	ldr	r1, [pc, #28]	; (d5780 <_Z22__fetch_global_Serial1v+0x48>)
   d5762:	4805      	ldr	r0, [pc, #20]	; (d5778 <_Z22__fetch_global_Serial1v+0x40>)
   d5764:	f000 fd34 	bl	d61d0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5768:	4803      	ldr	r0, [pc, #12]	; (d5778 <_Z22__fetch_global_Serial1v+0x40>)
   d576a:	bd38      	pop	{r3, r4, r5, pc}
   d576c:	2003e4ac 	.word	0x2003e4ac
   d5770:	2003e4b0 	.word	0x2003e4b0
   d5774:	2003e428 	.word	0x2003e428
   d5778:	2003e414 	.word	0x2003e414
   d577c:	2003e370 	.word	0x2003e370
   d5780:	000d5681 	.word	0x000d5681

000d5784 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5784:	4770      	bx	lr

000d5786 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5788:	4606      	mov	r6, r0
   d578a:	4615      	mov	r5, r2
   d578c:	460c      	mov	r4, r1
   d578e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5790:	42bc      	cmp	r4, r7
   d5792:	d006      	beq.n	d57a2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5794:	6833      	ldr	r3, [r6, #0]
   d5796:	f814 1b01 	ldrb.w	r1, [r4], #1
   d579a:	689b      	ldr	r3, [r3, #8]
   d579c:	4630      	mov	r0, r6
   d579e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d57a0:	e7f6      	b.n	d5790 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d57a2:	4628      	mov	r0, r5
   d57a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d57a6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d57a6:	2200      	movs	r2, #0
   d57a8:	7c00      	ldrb	r0, [r0, #16]
   d57aa:	f7ff ba33 	b.w	d4c14 <HAL_I2C_Write_Data>

000d57ae <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d57ae:	2100      	movs	r1, #0
   d57b0:	7c00      	ldrb	r0, [r0, #16]
   d57b2:	f7ff ba37 	b.w	d4c24 <HAL_I2C_Available_Data>

000d57b6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d57b6:	2100      	movs	r1, #0
   d57b8:	7c00      	ldrb	r0, [r0, #16]
   d57ba:	f7ff ba3b 	b.w	d4c34 <HAL_I2C_Read_Data>

000d57be <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d57be:	2100      	movs	r1, #0
   d57c0:	7c00      	ldrb	r0, [r0, #16]
   d57c2:	f7ff ba3f 	b.w	d4c44 <HAL_I2C_Peek_Data>

000d57c6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d57c6:	2100      	movs	r1, #0
   d57c8:	7c00      	ldrb	r0, [r0, #16]
   d57ca:	f7ff ba43 	b.w	d4c54 <HAL_I2C_Flush_Data>

000d57ce <_ZN7TwoWireD0Ev>:
   d57ce:	b510      	push	{r4, lr}
   d57d0:	2114      	movs	r1, #20
   d57d2:	4604      	mov	r4, r0
   d57d4:	f000 fd01 	bl	d61da <_ZdlPvj>
   d57d8:	4620      	mov	r0, r4
   d57da:	bd10      	pop	{r4, pc}

000d57dc <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d57dc:	b510      	push	{r4, lr}
   d57de:	4604      	mov	r4, r0
   d57e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d57e4:	4608      	mov	r0, r1
   d57e6:	60a3      	str	r3, [r4, #8]
   d57e8:	2100      	movs	r1, #0
   d57ea:	4b04      	ldr	r3, [pc, #16]	; (d57fc <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d57ec:	7420      	strb	r0, [r4, #16]
   d57ee:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d57f0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d57f2:	f7ff fa3f 	bl	d4c74 <HAL_I2C_Init>

}
   d57f6:	4620      	mov	r0, r4
   d57f8:	bd10      	pop	{r4, pc}
   d57fa:	bf00      	nop
   d57fc:	000d67a4 	.word	0x000d67a4

000d5800 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5800:	2100      	movs	r1, #0
   d5802:	7c00      	ldrb	r0, [r0, #16]
   d5804:	f7ff ba2e 	b.w	d4c64 <HAL_I2C_Is_Enabled>

000d5808 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5808:	2200      	movs	r2, #0
   d580a:	4611      	mov	r1, r2
   d580c:	6840      	ldr	r0, [r0, #4]
   d580e:	f7ff bb2d 	b.w	d4e6c <network_listening>

000d5812 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5812:	2200      	movs	r2, #0
   d5814:	4611      	mov	r1, r2
   d5816:	6840      	ldr	r0, [r0, #4]
   d5818:	f7ff bb38 	b.w	d4e8c <network_get_listen_timeout>

000d581c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d581c:	2200      	movs	r2, #0
   d581e:	6840      	ldr	r0, [r0, #4]
   d5820:	f7ff bb2c 	b.w	d4e7c <network_set_listen_timeout>

000d5824 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5824:	2200      	movs	r2, #0
   d5826:	f081 0101 	eor.w	r1, r1, #1
   d582a:	6840      	ldr	r0, [r0, #4]
   d582c:	f7ff bb16 	b.w	d4e5c <network_listen>

000d5830 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5830:	2300      	movs	r3, #0
   d5832:	461a      	mov	r2, r3
   d5834:	4619      	mov	r1, r3
   d5836:	6840      	ldr	r0, [r0, #4]
   d5838:	f7ff bb08 	b.w	d4e4c <network_off>

000d583c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d583c:	2300      	movs	r3, #0
   d583e:	461a      	mov	r2, r3
   d5840:	4619      	mov	r1, r3
   d5842:	6840      	ldr	r0, [r0, #4]
   d5844:	f7ff bafa 	b.w	d4e3c <network_on>

000d5848 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5848:	2200      	movs	r2, #0
   d584a:	4611      	mov	r1, r2
   d584c:	6840      	ldr	r0, [r0, #4]
   d584e:	f7ff baed 	b.w	d4e2c <network_ready>

000d5852 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5852:	2200      	movs	r2, #0
   d5854:	4611      	mov	r1, r2
   d5856:	6840      	ldr	r0, [r0, #4]
   d5858:	f7ff bad8 	b.w	d4e0c <network_connecting>

000d585c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d585c:	2200      	movs	r2, #0
   d585e:	2102      	movs	r1, #2
   d5860:	6840      	ldr	r0, [r0, #4]
   d5862:	f7ff badb 	b.w	d4e1c <network_disconnect>

000d5866 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5866:	2300      	movs	r3, #0
   d5868:	461a      	mov	r2, r3
   d586a:	6840      	ldr	r0, [r0, #4]
   d586c:	f7ff bac6 	b.w	d4dfc <network_connect>

000d5870 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5870:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5872:	4605      	mov	r5, r0
   d5874:	b188      	cbz	r0, d589a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5876:	6804      	ldr	r4, [r0, #0]
   d5878:	b14c      	cbz	r4, d588e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d587a:	68a3      	ldr	r3, [r4, #8]
   d587c:	b11b      	cbz	r3, d5886 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d587e:	2203      	movs	r2, #3
   d5880:	4621      	mov	r1, r4
   d5882:	4620      	mov	r0, r4
   d5884:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5886:	2110      	movs	r1, #16
   d5888:	4620      	mov	r0, r4
   d588a:	f000 fca6 	bl	d61da <_ZdlPvj>
   d588e:	4628      	mov	r0, r5
   d5890:	2114      	movs	r1, #20
      }
   d5892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5896:	f000 bca0 	b.w	d61da <_ZdlPvj>
   d589a:	bd38      	pop	{r3, r4, r5, pc}

000d589c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d589c:	b110      	cbz	r0, d58a4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d589e:	6803      	ldr	r3, [r0, #0]
   d58a0:	685b      	ldr	r3, [r3, #4]
   d58a2:	4718      	bx	r3
   d58a4:	4770      	bx	lr

000d58a6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d58a6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d58a8:	6803      	ldr	r3, [r0, #0]
   d58aa:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d58ac:	b1bb      	cbz	r3, d58de <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d58ae:	6858      	ldr	r0, [r3, #4]
   d58b0:	f7ff f930 	bl	d4b14 <os_thread_is_current>
   d58b4:	b978      	cbnz	r0, d58d6 <_ZN6ThreadD1Ev+0x30>
   d58b6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d58b8:	7c5a      	ldrb	r2, [r3, #17]
   d58ba:	b912      	cbnz	r2, d58c2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d58bc:	6858      	ldr	r0, [r3, #4]
   d58be:	f7ff f931 	bl	d4b24 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d58c2:	6823      	ldr	r3, [r4, #0]
   d58c4:	6858      	ldr	r0, [r3, #4]
   d58c6:	f7ff f935 	bl	d4b34 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d58ca:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d58cc:	2300      	movs	r3, #0
   d58ce:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d58d0:	b128      	cbz	r0, d58de <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d58d2:	f7ff ffcd 	bl	d5870 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d58d6:	6820      	ldr	r0, [r4, #0]
   d58d8:	b108      	cbz	r0, d58de <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d58da:	f7ff ffc9 	bl	d5870 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d58de:	4620      	mov	r0, r4
   d58e0:	bd10      	pop	{r4, pc}
	...

000d58e4 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d58e4:	b538      	push	{r3, r4, r5, lr}
   d58e6:	4b0c      	ldr	r3, [pc, #48]	; (d5918 <_ZN5spark9MeshClassD1Ev+0x34>)
   d58e8:	6003      	str	r3, [r0, #0]
   d58ea:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d58ec:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d58f0:	b108      	cbz	r0, d58f6 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d58f2:	f7fe fbd6 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d58f6:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d58fa:	b135      	cbz	r5, d590a <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d58fc:	4628      	mov	r0, r5
   d58fe:	f7ff ffd2 	bl	d58a6 <_ZN6ThreadD1Ev>
   d5902:	2104      	movs	r1, #4
   d5904:	4628      	mov	r0, r5
   d5906:	f000 fc68 	bl	d61da <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d590a:	68a0      	ldr	r0, [r4, #8]
   d590c:	b108      	cbz	r0, d5912 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d590e:	f7ff ffc5 	bl	d589c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5912:	4620      	mov	r0, r4
   d5914:	bd38      	pop	{r3, r4, r5, pc}
   d5916:	bf00      	nop
   d5918:	000d67cc 	.word	0x000d67cc

000d591c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d591c:	b538      	push	{r3, r4, r5, lr}
   d591e:	4c0d      	ldr	r4, [pc, #52]	; (d5954 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5920:	4b0d      	ldr	r3, [pc, #52]	; (d5958 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5922:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5924:	2500      	movs	r5, #0
   d5926:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5928:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d592c:	6063      	str	r3, [r4, #4]
   d592e:	60a5      	str	r5, [r4, #8]
   d5930:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5934:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5938:	f7ff f90c 	bl	d4b54 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d593c:	4b07      	ldr	r3, [pc, #28]	; (d595c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d593e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5942:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5944:	4620      	mov	r0, r4
   d5946:	4a06      	ldr	r2, [pc, #24]	; (d5960 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5948:	4906      	ldr	r1, [pc, #24]	; (d5964 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d594a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d594e:	f000 bc3f 	b.w	d61d0 <__aeabi_atexit>
   d5952:	bf00      	nop
   d5954:	2003e534 	.word	0x2003e534
   d5958:	000d68b4 	.word	0x000d68b4
   d595c:	000d67cc 	.word	0x000d67cc
   d5960:	2003e370 	.word	0x2003e370
   d5964:	000d58e5 	.word	0x000d58e5

000d5968 <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d5968:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d596a:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d596c:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d596e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5972:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d5974:	2201      	movs	r2, #1
   d5976:	f04f 33ff 	mov.w	r3, #4294967295
   d597a:	4621      	mov	r1, r4
   d597c:	47a8      	blx	r5
}
   d597e:	b003      	add	sp, #12
   d5980:	bd30      	pop	{r4, r5, pc}

000d5982 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d5982:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5984:	6803      	ldr	r3, [r0, #0]
   d5986:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5988:	f04f 33ff 	mov.w	r3, #4294967295
   d598c:	46a4      	mov	ip, r4
}
   d598e:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5992:	4760      	bx	ip

000d5994 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5994:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5996:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d5998:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d599a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d599e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d59a0:	4621      	mov	r1, r4
   d59a2:	4613      	mov	r3, r2
   d59a4:	2201      	movs	r2, #1
   d59a6:	47a8      	blx	r5
}
   d59a8:	b003      	add	sp, #12
   d59aa:	bd30      	pop	{r4, r5, pc}

000d59ac <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d59ac:	4770      	bx	lr

000d59ae <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d59ae:	b538      	push	{r3, r4, r5, lr}
   d59b0:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d59b2:	681a      	ldr	r2, [r3, #0]
   d59b4:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d59b6:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d59b8:	da05      	bge.n	d59c6 <_ZN9TCPClient9connectedEv+0x18>
   d59ba:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d59be:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d59c2:	429a      	cmp	r2, r3
   d59c4:	d001      	beq.n	d59ca <_ZN9TCPClient9connectedEv+0x1c>
   d59c6:	2501      	movs	r5, #1
   d59c8:	e00b      	b.n	d59e2 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d59ca:	6803      	ldr	r3, [r0, #0]
   d59cc:	691b      	ldr	r3, [r3, #16]
   d59ce:	4798      	blx	r3
   d59d0:	2800      	cmp	r0, #0
   d59d2:	bf14      	ite	ne
   d59d4:	2501      	movne	r5, #1
   d59d6:	2500      	moveq	r5, #0
        if (!rv) {
   d59d8:	d103      	bne.n	d59e2 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d59da:	6823      	ldr	r3, [r4, #0]
   d59dc:	4620      	mov	r0, r4
   d59de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d59e0:	4798      	blx	r3
        }
    }
    return rv;
}
   d59e2:	4628      	mov	r0, r5
   d59e4:	bd38      	pop	{r3, r4, r5, pc}

000d59e6 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d59e6:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d59e8:	6818      	ldr	r0, [r3, #0]
}
   d59ea:	43c0      	mvns	r0, r0
   d59ec:	0fc0      	lsrs	r0, r0, #31
   d59ee:	4770      	bx	lr

000d59f0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d59f0:	4770      	bx	lr

000d59f2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d59f2:	2000      	movs	r0, #0
   d59f4:	4770      	bx	lr

000d59f6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d59f6:	b510      	push	{r4, lr}
   d59f8:	2114      	movs	r1, #20
   d59fa:	4604      	mov	r4, r0
   d59fc:	f000 fbed 	bl	d61da <_ZdlPvj>
   d5a00:	4620      	mov	r0, r4
   d5a02:	bd10      	pop	{r4, pc}

000d5a04 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5a04:	f7fe bb4b 	b.w	d409e <_ZdlPv>

000d5a08 <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5a0c:	4698      	mov	r8, r3
    stop();
   d5a0e:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5a10:	b093      	sub	sp, #76	; 0x4c
    stop();
   d5a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5a14:	460c      	mov	r4, r1
   d5a16:	4606      	mov	r6, r0
   d5a18:	4617      	mov	r7, r2
    stop();
   d5a1a:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d5a1c:	ab12      	add	r3, sp, #72	; 0x48
   d5a1e:	2500      	movs	r5, #0
   d5a20:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d5a24:	462a      	mov	r2, r5
   d5a26:	4629      	mov	r1, r5
   d5a28:	4620      	mov	r0, r4
   d5a2a:	f7ff f813 	bl	d4a54 <netdb_getaddrinfo>
   d5a2e:	2800      	cmp	r0, #0
   d5a30:	db3a      	blt.n	d5aa8 <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d5a32:	9b00      	ldr	r3, [sp, #0]
   d5a34:	2b00      	cmp	r3, #0
   d5a36:	d039      	beq.n	d5aac <_ZN9TCPClient7connectEPKctm+0xa4>
   d5a38:	695b      	ldr	r3, [r3, #20]
   d5a3a:	2b00      	cmp	r3, #0
   d5a3c:	d036      	beq.n	d5aac <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   d5a3e:	a806      	add	r0, sp, #24
   d5a40:	f7ff fd42 	bl	d54c8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d5a44:	9b00      	ldr	r3, [sp, #0]
   d5a46:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d5a48:	7863      	ldrb	r3, [r4, #1]
   d5a4a:	2b02      	cmp	r3, #2
   d5a4c:	d101      	bne.n	d5a52 <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d5a4e:	1d21      	adds	r1, r4, #4
   d5a50:	e013      	b.n	d5a7a <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d5a52:	2b0a      	cmp	r3, #10
   d5a54:	d114      	bne.n	d5a80 <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d5a56:	2211      	movs	r2, #17
   d5a58:	4629      	mov	r1, r5
   d5a5a:	a801      	add	r0, sp, #4
   d5a5c:	f000 fd35 	bl	d64ca <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5a60:	68a3      	ldr	r3, [r4, #8]
   d5a62:	bb33      	cbnz	r3, d5ab2 <_ZN9TCPClient7connectEPKctm+0xaa>
   d5a64:	68e3      	ldr	r3, [r4, #12]
   d5a66:	bb23      	cbnz	r3, d5ab2 <_ZN9TCPClient7connectEPKctm+0xaa>
   d5a68:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5a6c:	6925      	ldr	r5, [r4, #16]
   d5a6e:	f7ff f881 	bl	d4b74 <inet_htonl>
   d5a72:	4285      	cmp	r5, r0
   d5a74:	d11d      	bne.n	d5ab2 <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d5a76:	f104 0114 	add.w	r1, r4, #20
   d5a7a:	a806      	add	r0, sp, #24
   d5a7c:	f7ff fd67 	bl	d554e <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d5a80:	a806      	add	r0, sp, #24
   d5a82:	f7ff fd41 	bl	d5508 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5a86:	b188      	cbz	r0, d5aac <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   d5a88:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5a8a:	ad07      	add	r5, sp, #28
   d5a8c:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d5a90:	4b18      	ldr	r3, [pc, #96]	; (d5af4 <_ZN9TCPClient7connectEPKctm+0xec>)
   d5a92:	930c      	str	r3, [sp, #48]	; 0x30
   d5a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5a96:	ac0d      	add	r4, sp, #52	; 0x34
   d5a98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5a9a:	682b      	ldr	r3, [r5, #0]
   d5a9c:	7023      	strb	r3, [r4, #0]
   d5a9e:	463a      	mov	r2, r7
   d5aa0:	4643      	mov	r3, r8
   d5aa2:	a90c      	add	r1, sp, #48	; 0x30
   d5aa4:	4630      	mov	r0, r6
   d5aa6:	47c8      	blx	r9
   d5aa8:	4604      	mov	r4, r0
   d5aaa:	e01c      	b.n	d5ae6 <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   d5aac:	f04f 34ff 	mov.w	r4, #4294967295
   d5ab0:	e019      	b.n	d5ae6 <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5ab2:	f104 0308 	add.w	r3, r4, #8
   d5ab6:	ad01      	add	r5, sp, #4
   d5ab8:	3418      	adds	r4, #24
   d5aba:	6818      	ldr	r0, [r3, #0]
   d5abc:	6859      	ldr	r1, [r3, #4]
   d5abe:	462a      	mov	r2, r5
   d5ac0:	c203      	stmia	r2!, {r0, r1}
   d5ac2:	3308      	adds	r3, #8
   d5ac4:	42a3      	cmp	r3, r4
   d5ac6:	4615      	mov	r5, r2
   d5ac8:	d1f7      	bne.n	d5aba <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   d5aca:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5acc:	a901      	add	r1, sp, #4
   d5ace:	a80c      	add	r0, sp, #48	; 0x30
   d5ad0:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d5ad2:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d5ad6:	f7ff fd05 	bl	d54e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5adc:	ac07      	add	r4, sp, #28
   d5ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5ae0:	682b      	ldr	r3, [r5, #0]
   d5ae2:	7023      	strb	r3, [r4, #0]
   d5ae4:	e7cc      	b.n	d5a80 <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d5ae6:	9800      	ldr	r0, [sp, #0]
   d5ae8:	f7fe ffac 	bl	d4a44 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   d5aec:	4620      	mov	r0, r4
   d5aee:	b013      	add	sp, #76	; 0x4c
   d5af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5af4:	000d6730 	.word	0x000d6730

000d5af8 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d5af8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5afa:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d5afc:	2200      	movs	r2, #0
   d5afe:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d5b00:	9202      	str	r2, [sp, #8]
   d5b02:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d5b04:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d5b06:	4604      	mov	r4, r0
   d5b08:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d5b0a:	d008      	beq.n	d5b1e <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d5b0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5b10:	fbb3 f1f2 	udiv	r1, r3, r2
   d5b14:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d5b16:	fb02 3111 	mls	r1, r2, r1, r3
   d5b1a:	434a      	muls	r2, r1
   d5b1c:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d5b1e:	6960      	ldr	r0, [r4, #20]
   d5b20:	2308      	movs	r3, #8
   d5b22:	9300      	str	r3, [sp, #0]
   d5b24:	f241 0205 	movw	r2, #4101	; 0x1005
   d5b28:	446b      	add	r3, sp
   d5b2a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5b2e:	6800      	ldr	r0, [r0, #0]
   d5b30:	f7ff f8a8 	bl	d4c84 <sock_setsockopt>
    if (ret < 0) {
   d5b34:	2800      	cmp	r0, #0
   d5b36:	db08      	blt.n	d5b4a <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d5b38:	6960      	ldr	r0, [r4, #20]
   d5b3a:	2300      	movs	r3, #0
   d5b3c:	4632      	mov	r2, r6
   d5b3e:	4629      	mov	r1, r5
   d5b40:	6800      	ldr	r0, [r0, #0]
   d5b42:	f7ff f8bf 	bl	d4cc4 <sock_send>
    if (ret < 0) {
   d5b46:	2800      	cmp	r0, #0
   d5b48:	da04      	bge.n	d5b54 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d5b4a:	f7ff f9df 	bl	d4f0c <__errno>
   d5b4e:	6803      	ldr	r3, [r0, #0]
   d5b50:	6063      	str	r3, [r4, #4]
   d5b52:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d5b54:	b004      	add	sp, #16
   d5b56:	bd70      	pop	{r4, r5, r6, pc}

000d5b58 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5b58:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5b5a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5b5c:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5b5e:	689b      	ldr	r3, [r3, #8]
   d5b60:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5b62:	68a3      	ldr	r3, [r4, #8]
   d5b64:	3b01      	subs	r3, #1
   d5b66:	60a3      	str	r3, [r4, #8]
   d5b68:	b92b      	cbnz	r3, d5b76 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d5b6a:	6823      	ldr	r3, [r4, #0]
   d5b6c:	4620      	mov	r0, r4
   d5b6e:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d5b74:	4718      	bx	r3
   d5b76:	bd10      	pop	{r4, pc}

000d5b78 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d5b78:	b570      	push	{r4, r5, r6, lr}
   d5b7a:	4604      	mov	r4, r0
   d5b7c:	694d      	ldr	r5, [r1, #20]
   d5b7e:	4b05      	ldr	r3, [pc, #20]	; (d5b94 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d5b80:	f844 3b04 	str.w	r3, [r4], #4
   d5b84:	358c      	adds	r5, #140	; 0x8c
   d5b86:	4606      	mov	r6, r0
   d5b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5b8c:	682b      	ldr	r3, [r5, #0]
   d5b8e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d5b90:	4630      	mov	r0, r6
   d5b92:	bd70      	pop	{r4, r5, r6, pc}
   d5b94:	000d6730 	.word	0x000d6730

000d5b98 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d5b98:	b510      	push	{r4, lr}
   d5b9a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5b9c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5ba0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5ba4:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d5ba6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5ba8:	d005      	beq.n	d5bb6 <_ZN9TCPClient4peekEv+0x1e>
   d5baa:	6962      	ldr	r2, [r4, #20]
   d5bac:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5bb0:	4413      	add	r3, r2
   d5bb2:	7918      	ldrb	r0, [r3, #4]
   d5bb4:	bd10      	pop	{r4, pc}
   d5bb6:	6803      	ldr	r3, [r0, #0]
   d5bb8:	691b      	ldr	r3, [r3, #16]
   d5bba:	4798      	blx	r3
   d5bbc:	2800      	cmp	r0, #0
   d5bbe:	d1f4      	bne.n	d5baa <_ZN9TCPClient4peekEv+0x12>
   d5bc0:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5bc4:	bd10      	pop	{r4, pc}

000d5bc6 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d5bc6:	b510      	push	{r4, lr}
   d5bc8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5bca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5bce:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5bd2:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d5bd4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5bd6:	d008      	beq.n	d5bea <_ZN9TCPClient4readEv+0x24>
   d5bd8:	6962      	ldr	r2, [r4, #20]
   d5bda:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5bde:	1c59      	adds	r1, r3, #1
   d5be0:	4413      	add	r3, r2
   d5be2:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d5be6:	7918      	ldrb	r0, [r3, #4]
   d5be8:	bd10      	pop	{r4, pc}
   d5bea:	6803      	ldr	r3, [r0, #0]
   d5bec:	691b      	ldr	r3, [r3, #16]
   d5bee:	4798      	blx	r3
   d5bf0:	2800      	cmp	r0, #0
   d5bf2:	d1f1      	bne.n	d5bd8 <_ZN9TCPClient4readEv+0x12>
   d5bf4:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5bf8:	bd10      	pop	{r4, pc}

000d5bfa <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d5bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5bfc:	6943      	ldr	r3, [r0, #20]
   d5bfe:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d5c00:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5c04:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5c08:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d5c0a:	4605      	mov	r5, r0
   d5c0c:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d5c0e:	d106      	bne.n	d5c1e <_ZN9TCPClient4readEPhj+0x24>
   d5c10:	6803      	ldr	r3, [r0, #0]
   d5c12:	691b      	ldr	r3, [r3, #16]
   d5c14:	4798      	blx	r3
   d5c16:	b910      	cbnz	r0, d5c1e <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d5c18:	f04f 34ff 	mov.w	r4, #4294967295
   d5c1c:	e014      	b.n	d5c48 <_ZN9TCPClient4readEPhj+0x4e>
   d5c1e:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d5c20:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d5c24:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d5c28:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d5c2a:	42bc      	cmp	r4, r7
   d5c2c:	bf28      	it	cs
   d5c2e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d5c30:	4419      	add	r1, r3
   d5c32:	4622      	mov	r2, r4
   d5c34:	3104      	adds	r1, #4
   d5c36:	4630      	mov	r0, r6
   d5c38:	f000 fc3c 	bl	d64b4 <memcpy>
   d5c3c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d5c3e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5c42:	4423      	add	r3, r4
   d5c44:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d5c48:	4620      	mov	r0, r4
   d5c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c4c <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d5c4c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d5c4e:	2300      	movs	r3, #0
   d5c50:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d5c54:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d5c56:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d5c5a:	4770      	bx	lr

000d5c5c <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5c60:	4698      	mov	r8, r3
    stop();
   d5c62:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5c64:	460d      	mov	r5, r1
   d5c66:	b08a      	sub	sp, #40	; 0x28
    stop();
   d5c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5c6a:	4606      	mov	r6, r0
   d5c6c:	4617      	mov	r7, r2
    stop();
   d5c6e:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d5c70:	7d2b      	ldrb	r3, [r5, #20]
   d5c72:	6974      	ldr	r4, [r6, #20]
   d5c74:	2b04      	cmp	r3, #4
   d5c76:	bf0c      	ite	eq
   d5c78:	2002      	moveq	r0, #2
   d5c7a:	200a      	movne	r0, #10
   d5c7c:	2206      	movs	r2, #6
   d5c7e:	2101      	movs	r1, #1
   d5c80:	f7ff f828 	bl	d4cd4 <sock_socket>
   d5c84:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   d5c86:	6973      	ldr	r3, [r6, #20]
   d5c88:	681c      	ldr	r4, [r3, #0]
   d5c8a:	2c00      	cmp	r4, #0
   d5c8c:	db5b      	blt.n	d5d46 <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   d5c8e:	4630      	mov	r0, r6
   d5c90:	f7ff ffdc 	bl	d5c4c <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d5c94:	f1b8 0f00 	cmp.w	r8, #0
   d5c98:	d017      	beq.n	d5cca <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   d5c9a:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d5c9c:	a903      	add	r1, sp, #12
   d5c9e:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d5ca2:	9303      	str	r3, [sp, #12]
   d5ca4:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d5ca8:	f7fe ff0c 	bl	d4ac4 <if_index_to_name>
   d5cac:	2800      	cmp	r0, #0
   d5cae:	db49      	blt.n	d5d44 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   d5cb0:	6970      	ldr	r0, [r6, #20]
   d5cb2:	2306      	movs	r3, #6
   d5cb4:	9300      	str	r3, [sp, #0]
   d5cb6:	f241 020b 	movw	r2, #4107	; 0x100b
   d5cba:	ab03      	add	r3, sp, #12
   d5cbc:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5cc0:	6800      	ldr	r0, [r0, #0]
   d5cc2:	f7fe ffdf 	bl	d4c84 <sock_setsockopt>
   d5cc6:	2800      	cmp	r0, #0
   d5cc8:	db3c      	blt.n	d5d44 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d5cca:	241c      	movs	r4, #28
   d5ccc:	4622      	mov	r2, r4
   d5cce:	2100      	movs	r1, #0
   d5cd0:	a803      	add	r0, sp, #12
   d5cd2:	f000 fbfa 	bl	d64ca <memset>
    if (ip.version() == 4) {
   d5cd6:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d5cd8:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d5cdc:	2b04      	cmp	r3, #4
   d5cde:	d10c      	bne.n	d5cfa <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d5ce0:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d5ce2:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d5ce4:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d5ce8:	f7fe ff4c 	bl	d4b84 <inet_htons>
   d5cec:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d5cf0:	6868      	ldr	r0, [r5, #4]
   d5cf2:	f7fe ff3f 	bl	d4b74 <inet_htonl>
   d5cf6:	9004      	str	r0, [sp, #16]
   d5cf8:	e013      	b.n	d5d22 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d5cfa:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d5cfc:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d5cfe:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d5d02:	f7fe ff3f 	bl	d4b84 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5d06:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d5d08:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5d0c:	1d2b      	adds	r3, r5, #4
   d5d0e:	f105 0714 	add.w	r7, r5, #20
   d5d12:	6818      	ldr	r0, [r3, #0]
   d5d14:	6859      	ldr	r1, [r3, #4]
   d5d16:	4622      	mov	r2, r4
   d5d18:	c203      	stmia	r2!, {r0, r1}
   d5d1a:	3308      	adds	r3, #8
   d5d1c:	42bb      	cmp	r3, r7
   d5d1e:	4614      	mov	r4, r2
   d5d20:	d1f7      	bne.n	d5d12 <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   d5d22:	6973      	ldr	r3, [r6, #20]
   d5d24:	221c      	movs	r2, #28
   d5d26:	a903      	add	r1, sp, #12
   d5d28:	6818      	ldr	r0, [r3, #0]
   d5d2a:	f7fe ffbb 	bl	d4ca4 <sock_connect>
   d5d2e:	2800      	cmp	r0, #0
   d5d30:	db08      	blt.n	d5d44 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   d5d32:	1d2c      	adds	r4, r5, #4
   d5d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5d36:	6976      	ldr	r6, [r6, #20]
   d5d38:	368c      	adds	r6, #140	; 0x8c
   d5d3a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d5d3c:	6823      	ldr	r3, [r4, #0]
   d5d3e:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   d5d40:	2401      	movs	r4, #1
   d5d42:	e004      	b.n	d5d4e <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   d5d44:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d5d46:	6833      	ldr	r3, [r6, #0]
   d5d48:	4630      	mov	r0, r6
   d5d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5d4c:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   d5d4e:	4620      	mov	r0, r4
   d5d50:	b00a      	add	sp, #40	; 0x28
   d5d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5d56 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d5d56:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d5d58:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d5d5a:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d5d5c:	6818      	ldr	r0, [r3, #0]
   d5d5e:	2800      	cmp	r0, #0
   d5d60:	db01      	blt.n	d5d66 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d5d62:	f7fe ff97 	bl	d4c94 <sock_close>
   d5d66:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d5d68:	f04f 32ff 	mov.w	r2, #4294967295
   d5d6c:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5d6e:	6960      	ldr	r0, [r4, #20]
   d5d70:	2211      	movs	r2, #17
   d5d72:	2100      	movs	r1, #0
   d5d74:	308c      	adds	r0, #140	; 0x8c
   d5d76:	f000 fba8 	bl	d64ca <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d5d7a:	4620      	mov	r0, r4
}
   d5d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d5d80:	f7ff bf64 	b.w	d5c4c <_ZN9TCPClient12flush_bufferEv>

000d5d84 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d5d84:	b530      	push	{r4, r5, lr}
   d5d86:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d5d88:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d5d8c:	b08b      	sub	sp, #44	; 0x2c
   d5d8e:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d5d90:	b11b      	cbz	r3, d5d9a <_ZN9TCPClient9availableEv+0x16>
   d5d92:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d5d96:	429a      	cmp	r2, r3
   d5d98:	d040      	beq.n	d5e1c <_ZN9TCPClient9availableEv+0x98>
   d5d9a:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d5d9c:	6818      	ldr	r0, [r3, #0]
   d5d9e:	2800      	cmp	r0, #0
   d5da0:	db3f      	blt.n	d5e22 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d5da2:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d5da6:	2d7f      	cmp	r5, #127	; 0x7f
   d5da8:	d83b      	bhi.n	d5e22 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d5daa:	1d19      	adds	r1, r3, #4
   d5dac:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d5db0:	2308      	movs	r3, #8
   d5db2:	4429      	add	r1, r5
   d5db4:	f7fe ff7e 	bl	d4cb4 <sock_recv>
            if (ret > 0) {
   d5db8:	2800      	cmp	r0, #0
   d5dba:	dd0c      	ble.n	d5dd6 <_ZN9TCPClient9availableEv+0x52>
   d5dbc:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d5dbe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5dc2:	b90a      	cbnz	r2, d5dc8 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d5dc4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d5dc8:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d5dca:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d5dce:	4418      	add	r0, r3
   d5dd0:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d5dd4:	e025      	b.n	d5e22 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d5dd6:	f7ff f899 	bl	d4f0c <__errno>
   d5dda:	6803      	ldr	r3, [r0, #0]
   d5ddc:	2b0b      	cmp	r3, #11
   d5dde:	d020      	beq.n	d5e22 <_ZN9TCPClient9availableEv+0x9e>
   d5de0:	f7ff f894 	bl	d4f0c <__errno>
   d5de4:	6803      	ldr	r3, [r0, #0]
   d5de6:	2b0b      	cmp	r3, #11
   d5de8:	d01b      	beq.n	d5e22 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d5dea:	2320      	movs	r3, #32
   d5dec:	2500      	movs	r5, #0
   d5dee:	9302      	str	r3, [sp, #8]
   d5df0:	9503      	str	r5, [sp, #12]
   d5df2:	f7ff f88b 	bl	d4f0c <__errno>
   d5df6:	6803      	ldr	r3, [r0, #0]
   d5df8:	9301      	str	r3, [sp, #4]
   d5dfa:	4b0e      	ldr	r3, [pc, #56]	; (d5e34 <_ZN9TCPClient9availableEv+0xb0>)
   d5dfc:	9300      	str	r3, [sp, #0]
   d5dfe:	aa02      	add	r2, sp, #8
   d5e00:	462b      	mov	r3, r5
   d5e02:	490d      	ldr	r1, [pc, #52]	; (d5e38 <_ZN9TCPClient9availableEv+0xb4>)
   d5e04:	2032      	movs	r0, #50	; 0x32
   d5e06:	f7fe ffc5 	bl	d4d94 <log_message>
                    sock_close(d_->sock);
   d5e0a:	6963      	ldr	r3, [r4, #20]
   d5e0c:	6818      	ldr	r0, [r3, #0]
   d5e0e:	f7fe ff41 	bl	d4c94 <sock_close>
   d5e12:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d5e14:	f04f 32ff 	mov.w	r2, #4294967295
   d5e18:	601a      	str	r2, [r3, #0]
   d5e1a:	e002      	b.n	d5e22 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d5e1c:	f7ff ff16 	bl	d5c4c <_ZN9TCPClient12flush_bufferEv>
   d5e20:	e7bb      	b.n	d5d9a <_ZN9TCPClient9availableEv+0x16>
   d5e22:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d5e24:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d5e28:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d5e2c:	1a18      	subs	r0, r3, r0
}
   d5e2e:	b00b      	add	sp, #44	; 0x2c
   d5e30:	bd30      	pop	{r4, r5, pc}
   d5e32:	bf00      	nop
   d5e34:	000d6867 	.word	0x000d6867
   d5e38:	000d6860 	.word	0x000d6860

000d5e3c <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d5e3c:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d5e3e:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d5e40:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d5e42:	6001      	str	r1, [r0, #0]
   d5e44:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d5e48:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d5e4c:	3088      	adds	r0, #136	; 0x88
   d5e4e:	f7ff fb3b 	bl	d54c8 <_ZN9IPAddressC1Ev>
}
   d5e52:	4620      	mov	r0, r4
   d5e54:	bd10      	pop	{r4, pc}
	...

000d5e58 <_ZN9TCPClientC1Ei>:
   d5e58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d5e5c:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5e5e:	2300      	movs	r3, #0
   d5e60:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d5e62:	4a14      	ldr	r2, [pc, #80]	; (d5eb4 <_ZN9TCPClientC1Ei+0x5c>)
   d5e64:	6043      	str	r3, [r0, #4]
   d5e66:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5e68:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5e6a:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d5e6c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5e6e:	20a0      	movs	r0, #160	; 0xa0
   d5e70:	460e      	mov	r6, r1
   d5e72:	f7fe f910 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5e76:	4605      	mov	r5, r0
   d5e78:	b110      	cbz	r0, d5e80 <_ZN9TCPClientC1Ei+0x28>
   d5e7a:	4631      	mov	r1, r6
   d5e7c:	f7ff ffde 	bl	d5e3c <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5e80:	2014      	movs	r0, #20
   d5e82:	f7fe f908 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5e86:	4603      	mov	r3, r0
   d5e88:	b128      	cbz	r0, d5e96 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5e8a:	2201      	movs	r2, #1
   d5e8c:	6042      	str	r2, [r0, #4]
   d5e8e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5e90:	4a09      	ldr	r2, [pc, #36]	; (d5eb8 <_ZN9TCPClientC1Ei+0x60>)
   d5e92:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5e94:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5e96:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5e98:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5e9a:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d5e9c:	b128      	cbz	r0, d5eaa <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5e9e:	6843      	ldr	r3, [r0, #4]
   d5ea0:	3b01      	subs	r3, #1
   d5ea2:	6043      	str	r3, [r0, #4]
   d5ea4:	b90b      	cbnz	r3, d5eaa <_ZN9TCPClientC1Ei+0x52>
   d5ea6:	f7ff fe57 	bl	d5b58 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d5eaa:	4620      	mov	r0, r4
   d5eac:	f7ff fece 	bl	d5c4c <_ZN9TCPClient12flush_bufferEv>
}
   d5eb0:	4620      	mov	r0, r4
   d5eb2:	bd70      	pop	{r4, r5, r6, pc}
   d5eb4:	000d681c 	.word	0x000d681c
   d5eb8:	000d6800 	.word	0x000d6800

000d5ebc <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d5ebc:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d5ebe:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d5ec2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d5ec4:	f7ff ffc8 	bl	d5e58 <_ZN9TCPClientC1Ei>
}
   d5ec8:	4620      	mov	r0, r4
   d5eca:	bd10      	pop	{r4, pc}

000d5ecc <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d5ecc:	b510      	push	{r4, lr}
   d5ece:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d5ed0:	6800      	ldr	r0, [r0, #0]
   d5ed2:	2800      	cmp	r0, #0
   d5ed4:	db01      	blt.n	d5eda <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d5ed6:	f7fe fedd 	bl	d4c94 <sock_close>
    }
}
   d5eda:	4620      	mov	r0, r4
   d5edc:	bd10      	pop	{r4, pc}

000d5ede <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5ede:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5ee0:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d5ee2:	4620      	mov	r0, r4
   d5ee4:	f7ff fff2 	bl	d5ecc <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d5ee8:	b124      	cbz	r4, d5ef4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5eea:	4620      	mov	r0, r4
   d5eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5ef0:	f7fe b8d5 	b.w	d409e <_ZdlPv>
   d5ef4:	bd10      	pop	{r4, pc}

000d5ef6 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5ef6:	2200      	movs	r2, #0
   d5ef8:	4611      	mov	r1, r2
   d5efa:	6840      	ldr	r0, [r0, #4]
   d5efc:	f7fe bf96 	b.w	d4e2c <network_ready>

000d5f00 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5f00:	2200      	movs	r2, #0
   d5f02:	4611      	mov	r1, r2
   d5f04:	6840      	ldr	r0, [r0, #4]
   d5f06:	f7fe bfb1 	b.w	d4e6c <network_listening>

000d5f0a <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5f0a:	2200      	movs	r2, #0
   d5f0c:	4611      	mov	r1, r2
   d5f0e:	6840      	ldr	r0, [r0, #4]
   d5f10:	f7fe bfbc 	b.w	d4e8c <network_get_listen_timeout>

000d5f14 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5f14:	2200      	movs	r2, #0
   d5f16:	6840      	ldr	r0, [r0, #4]
   d5f18:	f7fe bfb0 	b.w	d4e7c <network_set_listen_timeout>

000d5f1c <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5f1c:	2200      	movs	r2, #0
   d5f1e:	f081 0101 	eor.w	r1, r1, #1
   d5f22:	6840      	ldr	r0, [r0, #4]
   d5f24:	f7fe bf9a 	b.w	d4e5c <network_listen>

000d5f28 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5f28:	2300      	movs	r3, #0
   d5f2a:	461a      	mov	r2, r3
   d5f2c:	4619      	mov	r1, r3
   d5f2e:	6840      	ldr	r0, [r0, #4]
   d5f30:	f7fe bf8c 	b.w	d4e4c <network_off>

000d5f34 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5f34:	2300      	movs	r3, #0
   d5f36:	461a      	mov	r2, r3
   d5f38:	4619      	mov	r1, r3
   d5f3a:	6840      	ldr	r0, [r0, #4]
   d5f3c:	f7fe bf7e 	b.w	d4e3c <network_on>

000d5f40 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5f40:	2200      	movs	r2, #0
   d5f42:	4611      	mov	r1, r2
   d5f44:	6840      	ldr	r0, [r0, #4]
   d5f46:	f7fe bf61 	b.w	d4e0c <network_connecting>

000d5f4a <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5f4a:	2200      	movs	r2, #0
   d5f4c:	2102      	movs	r1, #2
   d5f4e:	6840      	ldr	r0, [r0, #4]
   d5f50:	f7fe bf64 	b.w	d4e1c <network_disconnect>

000d5f54 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5f54:	2300      	movs	r3, #0
   d5f56:	461a      	mov	r2, r3
   d5f58:	6840      	ldr	r0, [r0, #4]
   d5f5a:	f7fe bf4f 	b.w	d4dfc <network_connect>
	...

000d5f60 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5f60:	4b02      	ldr	r3, [pc, #8]	; (d5f6c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5f62:	2204      	movs	r2, #4
   d5f64:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5f66:	4a02      	ldr	r2, [pc, #8]	; (d5f70 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5f68:	601a      	str	r2, [r3, #0]
   d5f6a:	4770      	bx	lr
   d5f6c:	2003e704 	.word	0x2003e704
   d5f70:	000d6880 	.word	0x000d6880

000d5f74 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5f74:	2300      	movs	r3, #0
   d5f76:	461a      	mov	r2, r3
   d5f78:	6840      	ldr	r0, [r0, #4]
   d5f7a:	f7fe bf3f 	b.w	d4dfc <network_connect>

000d5f7e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5f7e:	2200      	movs	r2, #0
   d5f80:	2102      	movs	r1, #2
   d5f82:	6840      	ldr	r0, [r0, #4]
   d5f84:	f7fe bf4a 	b.w	d4e1c <network_disconnect>

000d5f88 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5f88:	2200      	movs	r2, #0
   d5f8a:	4611      	mov	r1, r2
   d5f8c:	6840      	ldr	r0, [r0, #4]
   d5f8e:	f7fe bf3d 	b.w	d4e0c <network_connecting>

000d5f92 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5f92:	2200      	movs	r2, #0
   d5f94:	4611      	mov	r1, r2
   d5f96:	6840      	ldr	r0, [r0, #4]
   d5f98:	f7fe bf48 	b.w	d4e2c <network_ready>

000d5f9c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5f9c:	2300      	movs	r3, #0
   d5f9e:	461a      	mov	r2, r3
   d5fa0:	4619      	mov	r1, r3
   d5fa2:	6840      	ldr	r0, [r0, #4]
   d5fa4:	f7fe bf4a 	b.w	d4e3c <network_on>

000d5fa8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5fa8:	2300      	movs	r3, #0
   d5faa:	461a      	mov	r2, r3
   d5fac:	4619      	mov	r1, r3
   d5fae:	6840      	ldr	r0, [r0, #4]
   d5fb0:	f7fe bf4c 	b.w	d4e4c <network_off>

000d5fb4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5fb4:	2200      	movs	r2, #0
   d5fb6:	f081 0101 	eor.w	r1, r1, #1
   d5fba:	6840      	ldr	r0, [r0, #4]
   d5fbc:	f7fe bf4e 	b.w	d4e5c <network_listen>

000d5fc0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5fc0:	2200      	movs	r2, #0
   d5fc2:	6840      	ldr	r0, [r0, #4]
   d5fc4:	f7fe bf5a 	b.w	d4e7c <network_set_listen_timeout>

000d5fc8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5fc8:	2200      	movs	r2, #0
   d5fca:	4611      	mov	r1, r2
   d5fcc:	6840      	ldr	r0, [r0, #4]
   d5fce:	f7fe bf5d 	b.w	d4e8c <network_get_listen_timeout>

000d5fd2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5fd2:	2200      	movs	r2, #0
   d5fd4:	4611      	mov	r1, r2
   d5fd6:	6840      	ldr	r0, [r0, #4]
   d5fd8:	f7fe bf48 	b.w	d4e6c <network_listening>

000d5fdc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5fe0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5fe2:	b095      	sub	sp, #84	; 0x54
   d5fe4:	4616      	mov	r6, r2
   d5fe6:	460d      	mov	r5, r1
   d5fe8:	4607      	mov	r7, r0
    IPAddress addr;
   d5fea:	f7ff fa6d 	bl	d54c8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5fee:	4621      	mov	r1, r4
   d5ff0:	2220      	movs	r2, #32
   d5ff2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5ff4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5ff6:	f000 fa68 	bl	d64ca <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5ffa:	2340      	movs	r3, #64	; 0x40
   d5ffc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5ffe:	4621      	mov	r1, r4
   d6000:	466b      	mov	r3, sp
   d6002:	aa0c      	add	r2, sp, #48	; 0x30
   d6004:	4630      	mov	r0, r6
   d6006:	f7fe fd25 	bl	d4a54 <netdb_getaddrinfo>
    if (!r) {
   d600a:	4604      	mov	r4, r0
   d600c:	2800      	cmp	r0, #0
   d600e:	d144      	bne.n	d609a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6010:	4602      	mov	r2, r0
   d6012:	2101      	movs	r1, #1
   d6014:	6868      	ldr	r0, [r5, #4]
   d6016:	f7fe ff09 	bl	d4e2c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d601a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d601c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d601e:	4622      	mov	r2, r4
   d6020:	6868      	ldr	r0, [r5, #4]
   d6022:	f7fe ff03 	bl	d4e2c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6026:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6028:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d602a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d602c:	2e00      	cmp	r6, #0
   d602e:	d034      	beq.n	d609a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6030:	2900      	cmp	r1, #0
   d6032:	d132      	bne.n	d609a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6034:	6873      	ldr	r3, [r6, #4]
   d6036:	2b02      	cmp	r3, #2
   d6038:	d002      	beq.n	d6040 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d603a:	2b0a      	cmp	r3, #10
   d603c:	d009      	beq.n	d6052 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d603e:	e02a      	b.n	d6096 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6040:	f1b8 0f00 	cmp.w	r8, #0
   d6044:	d027      	beq.n	d6096 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6046:	6971      	ldr	r1, [r6, #20]
   d6048:	4638      	mov	r0, r7
   d604a:	3104      	adds	r1, #4
   d604c:	f7ff fa7f 	bl	d554e <_ZN9IPAddressaSEPKh>
   d6050:	e020      	b.n	d6094 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6052:	f1b9 0f00 	cmp.w	r9, #0
   d6056:	d01e      	beq.n	d6096 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6058:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d605a:	2211      	movs	r2, #17
   d605c:	a801      	add	r0, sp, #4
   d605e:	f000 fa34 	bl	d64ca <memset>
                    a.v = 6;
   d6062:	2306      	movs	r3, #6
   d6064:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6068:	ad01      	add	r5, sp, #4
   d606a:	f104 0308 	add.w	r3, r4, #8
   d606e:	3418      	adds	r4, #24
   d6070:	6818      	ldr	r0, [r3, #0]
   d6072:	6859      	ldr	r1, [r3, #4]
   d6074:	462a      	mov	r2, r5
   d6076:	c203      	stmia	r2!, {r0, r1}
   d6078:	3308      	adds	r3, #8
   d607a:	42a3      	cmp	r3, r4
   d607c:	4615      	mov	r5, r2
   d607e:	d1f7      	bne.n	d6070 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6080:	a901      	add	r1, sp, #4
   d6082:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6084:	ad07      	add	r5, sp, #28
   d6086:	f7ff fa2d 	bl	d54e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d608a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d608c:	1d3c      	adds	r4, r7, #4
   d608e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6090:	682b      	ldr	r3, [r5, #0]
   d6092:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6094:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6096:	69f6      	ldr	r6, [r6, #28]
   d6098:	e7c8      	b.n	d602c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d609a:	9800      	ldr	r0, [sp, #0]
   d609c:	f7fe fcd2 	bl	d4a44 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d60a0:	4638      	mov	r0, r7
   d60a2:	b015      	add	sp, #84	; 0x54
   d60a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d60a8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d60a8:	4b02      	ldr	r3, [pc, #8]	; (d60b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d60aa:	4a03      	ldr	r2, [pc, #12]	; (d60b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d60ac:	601a      	str	r2, [r3, #0]
   d60ae:	2200      	movs	r2, #0
   d60b0:	605a      	str	r2, [r3, #4]
   d60b2:	4770      	bx	lr
   d60b4:	2003e70c 	.word	0x2003e70c
   d60b8:	000d68b4 	.word	0x000d68b4

000d60bc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d60bc:	b510      	push	{r4, lr}
   d60be:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d60c0:	480f      	ldr	r0, [pc, #60]	; (d6100 <pinAvailable+0x44>)
   d60c2:	f7fe ff85 	bl	d4fd0 <_ZN8SPIClass9isEnabledEv>
   d60c6:	b128      	cbz	r0, d60d4 <pinAvailable+0x18>
   d60c8:	f1a4 030b 	sub.w	r3, r4, #11
   d60cc:	2b02      	cmp	r3, #2
   d60ce:	d801      	bhi.n	d60d4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d60d0:	2000      	movs	r0, #0
   d60d2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d60d4:	f000 f85c 	bl	d6190 <_Z19__fetch_global_Wirev>
   d60d8:	f7ff fb92 	bl	d5800 <_ZN7TwoWire9isEnabledEv>
   d60dc:	b108      	cbz	r0, d60e2 <pinAvailable+0x26>
   d60de:	2c01      	cmp	r4, #1
   d60e0:	d9f6      	bls.n	d60d0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d60e2:	f7ff fb29 	bl	d5738 <_Z22__fetch_global_Serial1v>
   d60e6:	f7ff fb23 	bl	d5730 <_ZN11USARTSerial9isEnabledEv>
   d60ea:	b118      	cbz	r0, d60f4 <pinAvailable+0x38>
   d60ec:	f1a4 0309 	sub.w	r3, r4, #9
   d60f0:	2b01      	cmp	r3, #1
   d60f2:	d9ed      	bls.n	d60d0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d60f4:	2c23      	cmp	r4, #35	; 0x23
   d60f6:	bf8c      	ite	hi
   d60f8:	2000      	movhi	r0, #0
   d60fa:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d60fc:	bd10      	pop	{r4, pc}
   d60fe:	bf00      	nop
   d6100:	2003e714 	.word	0x2003e714

000d6104 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6104:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6106:	b538      	push	{r3, r4, r5, lr}
   d6108:	4604      	mov	r4, r0
   d610a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d610c:	d80a      	bhi.n	d6124 <pinMode+0x20>
   d610e:	29ff      	cmp	r1, #255	; 0xff
   d6110:	d008      	beq.n	d6124 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6112:	f7ff ffd3 	bl	d60bc <pinAvailable>
   d6116:	b128      	cbz	r0, d6124 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6118:	4629      	mov	r1, r5
   d611a:	4620      	mov	r0, r4
}
   d611c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6120:	f7fe bca8 	b.w	d4a74 <HAL_Pin_Mode>
   d6124:	bd38      	pop	{r3, r4, r5, pc}

000d6126 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6126:	b510      	push	{r4, lr}
   d6128:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d612a:	f7fe fcab 	bl	d4a84 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d612e:	3804      	subs	r0, #4
   d6130:	b2c0      	uxtb	r0, r0
   d6132:	2801      	cmp	r0, #1
   d6134:	d908      	bls.n	d6148 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6136:	4620      	mov	r0, r4
   d6138:	f7ff ffc0 	bl	d60bc <pinAvailable>
   d613c:	b120      	cbz	r0, d6148 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d613e:	4620      	mov	r0, r4
}
   d6140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6144:	f7fe bca6 	b.w	d4a94 <HAL_GPIO_Read>
}
   d6148:	2000      	movs	r0, #0
   d614a:	bd10      	pop	{r4, pc}

000d614c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d614c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d614e:	4c0c      	ldr	r4, [pc, #48]	; (d6180 <_GLOBAL__sub_I_SPI+0x34>)
   d6150:	4e0c      	ldr	r6, [pc, #48]	; (d6184 <_GLOBAL__sub_I_SPI+0x38>)
   d6152:	4d0d      	ldr	r5, [pc, #52]	; (d6188 <_GLOBAL__sub_I_SPI+0x3c>)
   d6154:	2100      	movs	r1, #0
   d6156:	4620      	mov	r0, r4
   d6158:	f7fe ff26 	bl	d4fa8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d615c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d615e:	4c0b      	ldr	r4, [pc, #44]	; (d618c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6160:	4632      	mov	r2, r6
   d6162:	4629      	mov	r1, r5
   d6164:	f000 f834 	bl	d61d0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6168:	2101      	movs	r1, #1
   d616a:	4620      	mov	r0, r4
   d616c:	f7fe ff1c 	bl	d4fa8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6170:	4632      	mov	r2, r6
   d6172:	4629      	mov	r1, r5
   d6174:	4620      	mov	r0, r4
   d6176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d617a:	f000 b829 	b.w	d61d0 <__aeabi_atexit>
   d617e:	bf00      	nop
   d6180:	2003e714 	.word	0x2003e714
   d6184:	2003e370 	.word	0x2003e370
   d6188:	000d4f99 	.word	0x000d4f99
   d618c:	2003e724 	.word	0x2003e724

000d6190 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6190:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6192:	4d0b      	ldr	r5, [pc, #44]	; (d61c0 <_Z19__fetch_global_Wirev+0x30>)
   d6194:	6829      	ldr	r1, [r5, #0]
   d6196:	f011 0401 	ands.w	r4, r1, #1
   d619a:	d10f      	bne.n	d61bc <_Z19__fetch_global_Wirev+0x2c>
   d619c:	4628      	mov	r0, r5
   d619e:	f7fd ff82 	bl	d40a6 <__cxa_guard_acquire>
   d61a2:	b158      	cbz	r0, d61bc <_Z19__fetch_global_Wirev+0x2c>
   d61a4:	4621      	mov	r1, r4
   d61a6:	4807      	ldr	r0, [pc, #28]	; (d61c4 <_Z19__fetch_global_Wirev+0x34>)
   d61a8:	f7ff fb18 	bl	d57dc <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d61ac:	4628      	mov	r0, r5
   d61ae:	f7fd ff7f 	bl	d40b0 <__cxa_guard_release>
   d61b2:	4a05      	ldr	r2, [pc, #20]	; (d61c8 <_Z19__fetch_global_Wirev+0x38>)
   d61b4:	4905      	ldr	r1, [pc, #20]	; (d61cc <_Z19__fetch_global_Wirev+0x3c>)
   d61b6:	4803      	ldr	r0, [pc, #12]	; (d61c4 <_Z19__fetch_global_Wirev+0x34>)
   d61b8:	f000 f80a 	bl	d61d0 <__aeabi_atexit>
	return wire;
}
   d61bc:	4801      	ldr	r0, [pc, #4]	; (d61c4 <_Z19__fetch_global_Wirev+0x34>)
   d61be:	bd38      	pop	{r3, r4, r5, pc}
   d61c0:	2003e738 	.word	0x2003e738
   d61c4:	2003e73c 	.word	0x2003e73c
   d61c8:	2003e370 	.word	0x2003e370
   d61cc:	000d5785 	.word	0x000d5785

000d61d0 <__aeabi_atexit>:
   d61d0:	460b      	mov	r3, r1
   d61d2:	4601      	mov	r1, r0
   d61d4:	4618      	mov	r0, r3
   d61d6:	f000 b94b 	b.w	d6470 <__cxa_atexit>

000d61da <_ZdlPvj>:
   d61da:	f7fd bf60 	b.w	d409e <_ZdlPv>
	...

000d61e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d61e0:	4b18      	ldr	r3, [pc, #96]	; (d6244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d61e2:	681a      	ldr	r2, [r3, #0]
   d61e4:	07d1      	lsls	r1, r2, #31
   d61e6:	bf5c      	itt	pl
   d61e8:	2201      	movpl	r2, #1
   d61ea:	601a      	strpl	r2, [r3, #0]
   d61ec:	4b16      	ldr	r3, [pc, #88]	; (d6248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d61ee:	681a      	ldr	r2, [r3, #0]
   d61f0:	07d2      	lsls	r2, r2, #31
   d61f2:	bf5c      	itt	pl
   d61f4:	2201      	movpl	r2, #1
   d61f6:	601a      	strpl	r2, [r3, #0]
   d61f8:	4b14      	ldr	r3, [pc, #80]	; (d624c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d61fa:	681a      	ldr	r2, [r3, #0]
   d61fc:	07d0      	lsls	r0, r2, #31
   d61fe:	bf5c      	itt	pl
   d6200:	2201      	movpl	r2, #1
   d6202:	601a      	strpl	r2, [r3, #0]
   d6204:	4b12      	ldr	r3, [pc, #72]	; (d6250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6206:	681a      	ldr	r2, [r3, #0]
   d6208:	07d1      	lsls	r1, r2, #31
   d620a:	bf5c      	itt	pl
   d620c:	2201      	movpl	r2, #1
   d620e:	601a      	strpl	r2, [r3, #0]
   d6210:	4b10      	ldr	r3, [pc, #64]	; (d6254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6212:	681a      	ldr	r2, [r3, #0]
   d6214:	07d2      	lsls	r2, r2, #31
   d6216:	bf5c      	itt	pl
   d6218:	2201      	movpl	r2, #1
   d621a:	601a      	strpl	r2, [r3, #0]
   d621c:	4b0e      	ldr	r3, [pc, #56]	; (d6258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d621e:	681a      	ldr	r2, [r3, #0]
   d6220:	07d0      	lsls	r0, r2, #31
   d6222:	bf5c      	itt	pl
   d6224:	2201      	movpl	r2, #1
   d6226:	601a      	strpl	r2, [r3, #0]
   d6228:	4b0c      	ldr	r3, [pc, #48]	; (d625c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d622a:	681a      	ldr	r2, [r3, #0]
   d622c:	07d1      	lsls	r1, r2, #31
   d622e:	bf5c      	itt	pl
   d6230:	2201      	movpl	r2, #1
   d6232:	601a      	strpl	r2, [r3, #0]
   d6234:	4b0a      	ldr	r3, [pc, #40]	; (d6260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6236:	681a      	ldr	r2, [r3, #0]
   d6238:	07d2      	lsls	r2, r2, #31
   d623a:	bf5c      	itt	pl
   d623c:	2201      	movpl	r2, #1
   d623e:	601a      	strpl	r2, [r3, #0]
   d6240:	4770      	bx	lr
   d6242:	bf00      	nop
   d6244:	2003e76c 	.word	0x2003e76c
   d6248:	2003e768 	.word	0x2003e768
   d624c:	2003e764 	.word	0x2003e764
   d6250:	2003e760 	.word	0x2003e760
   d6254:	2003e75c 	.word	0x2003e75c
   d6258:	2003e758 	.word	0x2003e758
   d625c:	2003e754 	.word	0x2003e754
   d6260:	2003e750 	.word	0x2003e750

000d6264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6264:	4b24      	ldr	r3, [pc, #144]	; (d62f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6266:	681a      	ldr	r2, [r3, #0]
   d6268:	07d0      	lsls	r0, r2, #31
   d626a:	bf5c      	itt	pl
   d626c:	2201      	movpl	r2, #1
   d626e:	601a      	strpl	r2, [r3, #0]
   d6270:	4b22      	ldr	r3, [pc, #136]	; (d62fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6272:	681a      	ldr	r2, [r3, #0]
   d6274:	07d1      	lsls	r1, r2, #31
   d6276:	bf5c      	itt	pl
   d6278:	2201      	movpl	r2, #1
   d627a:	601a      	strpl	r2, [r3, #0]
   d627c:	4b20      	ldr	r3, [pc, #128]	; (d6300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d627e:	681a      	ldr	r2, [r3, #0]
   d6280:	07d2      	lsls	r2, r2, #31
   d6282:	bf5c      	itt	pl
   d6284:	2201      	movpl	r2, #1
   d6286:	601a      	strpl	r2, [r3, #0]
   d6288:	4b1e      	ldr	r3, [pc, #120]	; (d6304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d628a:	681a      	ldr	r2, [r3, #0]
   d628c:	07d0      	lsls	r0, r2, #31
   d628e:	bf5c      	itt	pl
   d6290:	2201      	movpl	r2, #1
   d6292:	601a      	strpl	r2, [r3, #0]
   d6294:	4b1c      	ldr	r3, [pc, #112]	; (d6308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6296:	681a      	ldr	r2, [r3, #0]
   d6298:	07d1      	lsls	r1, r2, #31
   d629a:	bf5c      	itt	pl
   d629c:	2201      	movpl	r2, #1
   d629e:	601a      	strpl	r2, [r3, #0]
   d62a0:	4b1a      	ldr	r3, [pc, #104]	; (d630c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d62a2:	681a      	ldr	r2, [r3, #0]
   d62a4:	07d2      	lsls	r2, r2, #31
   d62a6:	bf5c      	itt	pl
   d62a8:	2201      	movpl	r2, #1
   d62aa:	601a      	strpl	r2, [r3, #0]
   d62ac:	4b18      	ldr	r3, [pc, #96]	; (d6310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d62ae:	681a      	ldr	r2, [r3, #0]
   d62b0:	07d0      	lsls	r0, r2, #31
   d62b2:	bf5c      	itt	pl
   d62b4:	2201      	movpl	r2, #1
   d62b6:	601a      	strpl	r2, [r3, #0]
   d62b8:	4b16      	ldr	r3, [pc, #88]	; (d6314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d62ba:	681a      	ldr	r2, [r3, #0]
   d62bc:	07d1      	lsls	r1, r2, #31
   d62be:	bf5c      	itt	pl
   d62c0:	2201      	movpl	r2, #1
   d62c2:	601a      	strpl	r2, [r3, #0]
   d62c4:	4b14      	ldr	r3, [pc, #80]	; (d6318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d62c6:	681a      	ldr	r2, [r3, #0]
   d62c8:	07d2      	lsls	r2, r2, #31
   d62ca:	bf5c      	itt	pl
   d62cc:	2201      	movpl	r2, #1
   d62ce:	601a      	strpl	r2, [r3, #0]
   d62d0:	4b12      	ldr	r3, [pc, #72]	; (d631c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d62d2:	681a      	ldr	r2, [r3, #0]
   d62d4:	07d0      	lsls	r0, r2, #31
   d62d6:	bf5c      	itt	pl
   d62d8:	2201      	movpl	r2, #1
   d62da:	601a      	strpl	r2, [r3, #0]
   d62dc:	4b10      	ldr	r3, [pc, #64]	; (d6320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d62de:	681a      	ldr	r2, [r3, #0]
   d62e0:	07d1      	lsls	r1, r2, #31
   d62e2:	bf5c      	itt	pl
   d62e4:	2201      	movpl	r2, #1
   d62e6:	601a      	strpl	r2, [r3, #0]
   d62e8:	4b0e      	ldr	r3, [pc, #56]	; (d6324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d62ea:	681a      	ldr	r2, [r3, #0]
   d62ec:	07d2      	lsls	r2, r2, #31
   d62ee:	bf5c      	itt	pl
   d62f0:	2201      	movpl	r2, #1
   d62f2:	601a      	strpl	r2, [r3, #0]
   d62f4:	4770      	bx	lr
   d62f6:	bf00      	nop
   d62f8:	2003e79c 	.word	0x2003e79c
   d62fc:	2003e798 	.word	0x2003e798
   d6300:	2003e794 	.word	0x2003e794
   d6304:	2003e790 	.word	0x2003e790
   d6308:	2003e78c 	.word	0x2003e78c
   d630c:	2003e788 	.word	0x2003e788
   d6310:	2003e784 	.word	0x2003e784
   d6314:	2003e780 	.word	0x2003e780
   d6318:	2003e77c 	.word	0x2003e77c
   d631c:	2003e778 	.word	0x2003e778
   d6320:	2003e774 	.word	0x2003e774
   d6324:	2003e770 	.word	0x2003e770

000d6328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6328:	4b24      	ldr	r3, [pc, #144]	; (d63bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d632a:	681a      	ldr	r2, [r3, #0]
   d632c:	07d0      	lsls	r0, r2, #31
   d632e:	bf5c      	itt	pl
   d6330:	2201      	movpl	r2, #1
   d6332:	601a      	strpl	r2, [r3, #0]
   d6334:	4b22      	ldr	r3, [pc, #136]	; (d63c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6336:	681a      	ldr	r2, [r3, #0]
   d6338:	07d1      	lsls	r1, r2, #31
   d633a:	bf5c      	itt	pl
   d633c:	2201      	movpl	r2, #1
   d633e:	601a      	strpl	r2, [r3, #0]
   d6340:	4b20      	ldr	r3, [pc, #128]	; (d63c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6342:	681a      	ldr	r2, [r3, #0]
   d6344:	07d2      	lsls	r2, r2, #31
   d6346:	bf5c      	itt	pl
   d6348:	2201      	movpl	r2, #1
   d634a:	601a      	strpl	r2, [r3, #0]
   d634c:	4b1e      	ldr	r3, [pc, #120]	; (d63c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d634e:	681a      	ldr	r2, [r3, #0]
   d6350:	07d0      	lsls	r0, r2, #31
   d6352:	bf5c      	itt	pl
   d6354:	2201      	movpl	r2, #1
   d6356:	601a      	strpl	r2, [r3, #0]
   d6358:	4b1c      	ldr	r3, [pc, #112]	; (d63cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d635a:	681a      	ldr	r2, [r3, #0]
   d635c:	07d1      	lsls	r1, r2, #31
   d635e:	bf5c      	itt	pl
   d6360:	2201      	movpl	r2, #1
   d6362:	601a      	strpl	r2, [r3, #0]
   d6364:	4b1a      	ldr	r3, [pc, #104]	; (d63d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6366:	681a      	ldr	r2, [r3, #0]
   d6368:	07d2      	lsls	r2, r2, #31
   d636a:	bf5c      	itt	pl
   d636c:	2201      	movpl	r2, #1
   d636e:	601a      	strpl	r2, [r3, #0]
   d6370:	4b18      	ldr	r3, [pc, #96]	; (d63d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6372:	681a      	ldr	r2, [r3, #0]
   d6374:	07d0      	lsls	r0, r2, #31
   d6376:	bf5c      	itt	pl
   d6378:	2201      	movpl	r2, #1
   d637a:	601a      	strpl	r2, [r3, #0]
   d637c:	4b16      	ldr	r3, [pc, #88]	; (d63d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d637e:	681a      	ldr	r2, [r3, #0]
   d6380:	07d1      	lsls	r1, r2, #31
   d6382:	bf5c      	itt	pl
   d6384:	2201      	movpl	r2, #1
   d6386:	601a      	strpl	r2, [r3, #0]
   d6388:	4b14      	ldr	r3, [pc, #80]	; (d63dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d638a:	681a      	ldr	r2, [r3, #0]
   d638c:	07d2      	lsls	r2, r2, #31
   d638e:	bf5c      	itt	pl
   d6390:	2201      	movpl	r2, #1
   d6392:	601a      	strpl	r2, [r3, #0]
   d6394:	4b12      	ldr	r3, [pc, #72]	; (d63e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6396:	681a      	ldr	r2, [r3, #0]
   d6398:	07d0      	lsls	r0, r2, #31
   d639a:	bf5c      	itt	pl
   d639c:	2201      	movpl	r2, #1
   d639e:	601a      	strpl	r2, [r3, #0]
   d63a0:	4b10      	ldr	r3, [pc, #64]	; (d63e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d63a2:	681a      	ldr	r2, [r3, #0]
   d63a4:	07d1      	lsls	r1, r2, #31
   d63a6:	bf5c      	itt	pl
   d63a8:	2201      	movpl	r2, #1
   d63aa:	601a      	strpl	r2, [r3, #0]
   d63ac:	4b0e      	ldr	r3, [pc, #56]	; (d63e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d63ae:	681a      	ldr	r2, [r3, #0]
   d63b0:	07d2      	lsls	r2, r2, #31
   d63b2:	bf5c      	itt	pl
   d63b4:	2201      	movpl	r2, #1
   d63b6:	601a      	strpl	r2, [r3, #0]
   d63b8:	4770      	bx	lr
   d63ba:	bf00      	nop
   d63bc:	2003e7cc 	.word	0x2003e7cc
   d63c0:	2003e7c8 	.word	0x2003e7c8
   d63c4:	2003e7c4 	.word	0x2003e7c4
   d63c8:	2003e7c0 	.word	0x2003e7c0
   d63cc:	2003e7bc 	.word	0x2003e7bc
   d63d0:	2003e7b8 	.word	0x2003e7b8
   d63d4:	2003e7b4 	.word	0x2003e7b4
   d63d8:	2003e7b0 	.word	0x2003e7b0
   d63dc:	2003e7ac 	.word	0x2003e7ac
   d63e0:	2003e7a8 	.word	0x2003e7a8
   d63e4:	2003e7a4 	.word	0x2003e7a4
   d63e8:	2003e7a0 	.word	0x2003e7a0

000d63ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d63ec:	4b18      	ldr	r3, [pc, #96]	; (d6450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d63ee:	681a      	ldr	r2, [r3, #0]
   d63f0:	07d1      	lsls	r1, r2, #31
   d63f2:	bf5c      	itt	pl
   d63f4:	2201      	movpl	r2, #1
   d63f6:	601a      	strpl	r2, [r3, #0]
   d63f8:	4b16      	ldr	r3, [pc, #88]	; (d6454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d63fa:	681a      	ldr	r2, [r3, #0]
   d63fc:	07d2      	lsls	r2, r2, #31
   d63fe:	bf5c      	itt	pl
   d6400:	2201      	movpl	r2, #1
   d6402:	601a      	strpl	r2, [r3, #0]
   d6404:	4b14      	ldr	r3, [pc, #80]	; (d6458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6406:	681a      	ldr	r2, [r3, #0]
   d6408:	07d0      	lsls	r0, r2, #31
   d640a:	bf5c      	itt	pl
   d640c:	2201      	movpl	r2, #1
   d640e:	601a      	strpl	r2, [r3, #0]
   d6410:	4b12      	ldr	r3, [pc, #72]	; (d645c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6412:	681a      	ldr	r2, [r3, #0]
   d6414:	07d1      	lsls	r1, r2, #31
   d6416:	bf5c      	itt	pl
   d6418:	2201      	movpl	r2, #1
   d641a:	601a      	strpl	r2, [r3, #0]
   d641c:	4b10      	ldr	r3, [pc, #64]	; (d6460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d641e:	681a      	ldr	r2, [r3, #0]
   d6420:	07d2      	lsls	r2, r2, #31
   d6422:	bf5c      	itt	pl
   d6424:	2201      	movpl	r2, #1
   d6426:	601a      	strpl	r2, [r3, #0]
   d6428:	4b0e      	ldr	r3, [pc, #56]	; (d6464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d642a:	681a      	ldr	r2, [r3, #0]
   d642c:	07d0      	lsls	r0, r2, #31
   d642e:	bf5c      	itt	pl
   d6430:	2201      	movpl	r2, #1
   d6432:	601a      	strpl	r2, [r3, #0]
   d6434:	4b0c      	ldr	r3, [pc, #48]	; (d6468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6436:	681a      	ldr	r2, [r3, #0]
   d6438:	07d1      	lsls	r1, r2, #31
   d643a:	bf5c      	itt	pl
   d643c:	2201      	movpl	r2, #1
   d643e:	601a      	strpl	r2, [r3, #0]
   d6440:	4b0a      	ldr	r3, [pc, #40]	; (d646c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6442:	681a      	ldr	r2, [r3, #0]
   d6444:	07d2      	lsls	r2, r2, #31
   d6446:	bf5c      	itt	pl
   d6448:	2201      	movpl	r2, #1
   d644a:	601a      	strpl	r2, [r3, #0]
   d644c:	4770      	bx	lr
   d644e:	bf00      	nop
   d6450:	2003e7ec 	.word	0x2003e7ec
   d6454:	2003e7e8 	.word	0x2003e7e8
   d6458:	2003e7e4 	.word	0x2003e7e4
   d645c:	2003e7e0 	.word	0x2003e7e0
   d6460:	2003e7dc 	.word	0x2003e7dc
   d6464:	2003e7d8 	.word	0x2003e7d8
   d6468:	2003e7d4 	.word	0x2003e7d4
   d646c:	2003e7d0 	.word	0x2003e7d0

000d6470 <__cxa_atexit>:
   d6470:	b510      	push	{r4, lr}
   d6472:	4c05      	ldr	r4, [pc, #20]	; (d6488 <__cxa_atexit+0x18>)
   d6474:	4613      	mov	r3, r2
   d6476:	b12c      	cbz	r4, d6484 <__cxa_atexit+0x14>
   d6478:	460a      	mov	r2, r1
   d647a:	4601      	mov	r1, r0
   d647c:	2002      	movs	r0, #2
   d647e:	f3af 8000 	nop.w
   d6482:	bd10      	pop	{r4, pc}
   d6484:	4620      	mov	r0, r4
   d6486:	bd10      	pop	{r4, pc}
   d6488:	00000000 	.word	0x00000000

000d648c <ldiv>:
   d648c:	2900      	cmp	r1, #0
   d648e:	b510      	push	{r4, lr}
   d6490:	fb91 f4f2 	sdiv	r4, r1, r2
   d6494:	fb02 1314 	mls	r3, r2, r4, r1
   d6498:	db04      	blt.n	d64a4 <ldiv+0x18>
   d649a:	2b00      	cmp	r3, #0
   d649c:	da07      	bge.n	d64ae <ldiv+0x22>
   d649e:	3401      	adds	r4, #1
   d64a0:	1a9b      	subs	r3, r3, r2
   d64a2:	e004      	b.n	d64ae <ldiv+0x22>
   d64a4:	2b00      	cmp	r3, #0
   d64a6:	bfc4      	itt	gt
   d64a8:	f104 34ff 	addgt.w	r4, r4, #4294967295
   d64ac:	189b      	addgt	r3, r3, r2
   d64ae:	6004      	str	r4, [r0, #0]
   d64b0:	6043      	str	r3, [r0, #4]
   d64b2:	bd10      	pop	{r4, pc}

000d64b4 <memcpy>:
   d64b4:	b510      	push	{r4, lr}
   d64b6:	1e43      	subs	r3, r0, #1
   d64b8:	440a      	add	r2, r1
   d64ba:	4291      	cmp	r1, r2
   d64bc:	d004      	beq.n	d64c8 <memcpy+0x14>
   d64be:	f811 4b01 	ldrb.w	r4, [r1], #1
   d64c2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d64c6:	e7f8      	b.n	d64ba <memcpy+0x6>
   d64c8:	bd10      	pop	{r4, pc}

000d64ca <memset>:
   d64ca:	4402      	add	r2, r0
   d64cc:	4603      	mov	r3, r0
   d64ce:	4293      	cmp	r3, r2
   d64d0:	d002      	beq.n	d64d8 <memset+0xe>
   d64d2:	f803 1b01 	strb.w	r1, [r3], #1
   d64d6:	e7fa      	b.n	d64ce <memset+0x4>
   d64d8:	4770      	bx	lr
	...

000d64dc <srand>:
   d64dc:	b538      	push	{r3, r4, r5, lr}
   d64de:	4b12      	ldr	r3, [pc, #72]	; (d6528 <srand+0x4c>)
   d64e0:	681c      	ldr	r4, [r3, #0]
   d64e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d64e4:	4605      	mov	r5, r0
   d64e6:	b9d3      	cbnz	r3, d651e <srand+0x42>
   d64e8:	2018      	movs	r0, #24
   d64ea:	f7fe fcf7 	bl	d4edc <malloc>
   d64ee:	f243 330e 	movw	r3, #13070	; 0x330e
   d64f2:	63a0      	str	r0, [r4, #56]	; 0x38
   d64f4:	8003      	strh	r3, [r0, #0]
   d64f6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d64fa:	8043      	strh	r3, [r0, #2]
   d64fc:	f241 2334 	movw	r3, #4660	; 0x1234
   d6500:	8083      	strh	r3, [r0, #4]
   d6502:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6506:	80c3      	strh	r3, [r0, #6]
   d6508:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d650c:	8103      	strh	r3, [r0, #8]
   d650e:	2305      	movs	r3, #5
   d6510:	8143      	strh	r3, [r0, #10]
   d6512:	230b      	movs	r3, #11
   d6514:	8183      	strh	r3, [r0, #12]
   d6516:	2201      	movs	r2, #1
   d6518:	2300      	movs	r3, #0
   d651a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d651e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6520:	2200      	movs	r2, #0
   d6522:	611d      	str	r5, [r3, #16]
   d6524:	615a      	str	r2, [r3, #20]
   d6526:	bd38      	pop	{r3, r4, r5, pc}
   d6528:	2003e36c 	.word	0x2003e36c

000d652c <strcmp>:
   d652c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6530:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6534:	2a01      	cmp	r2, #1
   d6536:	bf28      	it	cs
   d6538:	429a      	cmpcs	r2, r3
   d653a:	d0f7      	beq.n	d652c <strcmp>
   d653c:	1ad0      	subs	r0, r2, r3
   d653e:	4770      	bx	lr

000d6540 <strcpy>:
   d6540:	4603      	mov	r3, r0
   d6542:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6546:	f803 2b01 	strb.w	r2, [r3], #1
   d654a:	2a00      	cmp	r2, #0
   d654c:	d1f9      	bne.n	d6542 <strcpy+0x2>
   d654e:	4770      	bx	lr

000d6550 <strlen>:
   d6550:	4603      	mov	r3, r0
   d6552:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6556:	2a00      	cmp	r2, #0
   d6558:	d1fb      	bne.n	d6552 <strlen+0x2>
   d655a:	1a18      	subs	r0, r3, r0
   d655c:	3801      	subs	r0, #1
   d655e:	4770      	bx	lr

000d6560 <dynalib_user>:
   d6560:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6570:	0000 0000 4552 0044 5247 4545 004e 4c42     ....RED.GREEN.BL
   d6580:	4555 7300 6170 6b72 6c63 6569 746e 005f     UE.sparkclient_.
   d6590:	6568 6c6c 006f 6f74 6464 7241 6f67 2f6e     hello.toddArgon/
   d65a0:	656d 7373 6761 0065 6f64 6e77 6f6c 6461     message.download
   d65b0:	6f6d 6572 6172 2e6d 6f63 006d 616c 2e62     moreram.com.lab.
   d65c0:	6874 7765 6c63 632e 6d6f 0000 4d04 5451     thewcl.com...MQT
   d65d0:	0454 0600 514d 7349 7064 0003               T...MQIsdp..

000d65dc <_ZTVN5spark13EthernetClassE>:
	...
   d65e4:	4f7b 000d 4f71 000d 4f67 000d 4f5d 000d     {O..qO..gO..]O..
   d65f4:	4f51 000d 4f45 000d 4f39 000d 4f31 000d     QO..EO..9O..1O..
   d6604:	4f27 000d 4f1d 000d 5fdd 000d               'O...O..._..

000d6610 <_ZTV8SPIClass>:
	...
   d6618:	4f99 000d 4f9b 000d 0066 6e6c 6600 006e     .O...O..f.ln.fn.
   d6628:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
   d6638:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   d6648:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   d6658:	7465 6961 736c 3d20 0020 6162 6475 5300     etails = .baud.S
   d6668:	7265 6169 006c 6553 6972 6c61 0031 7974     erial.Serial1.ty
   d6678:	6570 7000 7261 6d61 6300 646d 6900 0064     pe.param.cmd.id.
   d6688:	6e68 0064 7473 6d72 6600 6c69 0074 766c     hnd.strm.filt.lv
   d6698:	006c 6461 4864 6e61 6c64 7265 7200 6d65     l.addHandler.rem
   d66a8:	766f 4865 6e61 6c64 7265 6500 756e 486d     oveHandler.enumH
   d66b8:	6e61 6c64 7265 0073 534a 4e4f 7453 6572     andlers.JSONStre
   d66c8:	6d61 6f4c 4867 6e61 6c64 7265 6100 7070     amLogHandler.app
   d66d8:	6e00 6e6f 0065 7274 6361 0065 6e69 6f66     .none.trace.info
   d66e8:	7700 7261 006e 7265 6f72 0072 6170 696e     .warn.error.pani
   d66f8:	0063 6c61 006c 005a 2b25 3330 3a64 3025     c.all.Z.%+03d:%0
   d6708:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d6718:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d6728 <_ZTV9IPAddress>:
	...
   d6730:	5465 000d 5455 000d 5457 000d               eT..UT..WT..

000d673c <_ZTV9USBSerial>:
	...
   d6744:	557d 000d 55cd 000d 55db 000d 51c1 000d     }U...U...U...Q..
   d6754:	55b9 000d 557f 000d 5595 000d 55c7 000d     .U...U...U...U..
   d6764:	55ab 000d 5579 000d                         .U..yU..

000d676c <_ZTV11USARTSerial>:
	...
   d6774:	5681 000d 56d1 000d 56df 000d 51c1 000d     .V...V...V...Q..
   d6784:	5695 000d 56b7 000d 56a3 000d 56cb 000d     .V...V...V...V..
   d6794:	5683 000d 5687 000d                         .V...V..

000d679c <_ZTV7TwoWire>:
	...
   d67a4:	5785 000d 57cf 000d 57a7 000d 5787 000d     .W...W...W...W..
   d67b4:	57af 000d 57b7 000d 57bf 000d 57c7 000d     .W...W...W...W..

000d67c4 <_ZTVN5spark9MeshClassE>:
	...
   d67cc:	5867 000d 585d 000d 5853 000d 5849 000d     gX..]X..SX..IX..
   d67dc:	583d 000d 5831 000d 5825 000d 581d 000d     =X..1X..%X...X..
   d67ec:	5813 000d 5809 000d 5fdd 000d               .X...X..._..

000d67f8 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d6800:	59f1 000d 59f7 000d 5edf 000d 5a05 000d     .Y...Y...^...Z..
   d6810:	59f3 000d                                   .Y..

000d6814 <_ZTV9TCPClient>:
	...
   d681c:	4205 000d 4239 000d 5969 000d 5983 000d     .B..9B..iY...Y..
   d682c:	5d85 000d 5bc7 000d 5b99 000d 59ad 000d     .]...[...[...Y..
   d683c:	5c5d 000d 5a09 000d 5bfb 000d 5d57 000d     ]\...Z...[..W]..
   d684c:	59af 000d 59e7 000d 5995 000d 5af9 000d     .Y...Y...Y...Z..
   d685c:	5b79 000d 6977 6972 676e 7200 6365 2076     y[..wiring.recv 
   d686c:	7265 6f72 2072 203d 6425 0000               error = %d..

000d6878 <_ZTVN5spark9WiFiClassE>:
	...
   d6880:	5f55 000d 5f4b 000d 5f41 000d 5ef7 000d     U_..K_..A_...^..
   d6890:	5f35 000d 5f29 000d 5f1d 000d 5f15 000d     5_..)_..._..._..
   d68a0:	5f0b 000d 5f01 000d 5fdd 000d               ._..._..._..

000d68ac <_ZTVN5spark12NetworkClassE>:
	...
   d68b4:	5f75 000d 5f7f 000d 5f89 000d 5f93 000d     u_..._..._..._..
   d68c4:	5f9d 000d 5fa9 000d 5fb5 000d 5fc1 000d     ._..._..._..._..
   d68d4:	5fc9 000d 5fd3 000d 5fdd 000d               ._..._..._..

000d68e0 <__sf_fake_stdin>:
	...

000d6900 <__sf_fake_stdout>:
	...

000d6920 <__sf_fake_stderr>:
	...
   d6940:	0043                                        C.

000d6942 <link_const_variable_data_end>:
	...

000d6944 <link_constructors_location>:
   d6944:	000d41cd 	.word	0x000d41cd
   d6948:	000d4a3f 	.word	0x000d4a3f
   d694c:	000d4f85 	.word	0x000d4f85
   d6950:	000d4fd9 	.word	0x000d4fd9
   d6954:	000d51b1 	.word	0x000d51b1
   d6958:	000d5271 	.word	0x000d5271
   d695c:	000d52ed 	.word	0x000d52ed
   d6960:	000d5365 	.word	0x000d5365
   d6964:	000d591d 	.word	0x000d591d
   d6968:	000d5f61 	.word	0x000d5f61
   d696c:	000d60a9 	.word	0x000d60a9
   d6970:	000d614d 	.word	0x000d614d
   d6974:	000d61e1 	.word	0x000d61e1
   d6978:	000d6265 	.word	0x000d6265
   d697c:	000d6329 	.word	0x000d6329
   d6980:	000d63ed 	.word	0x000d63ed

000d6984 <link_constructors_end>:
	...
